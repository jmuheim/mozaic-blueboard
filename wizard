// Make sure to start the BlueBoard while pressing the B button!
@OnLoad
  SetShortName {Wizard}

  Call @InitConstants
  Call @InitVariables

  Call @IlluminateAllbuttons
  Call @AskForInput
@End

@InitConstants
  BB_NOTE_A = 60
  BB_NOTE_B = 62
  BB_NOTE_C = 64
  BB_NOTE_D = 65

  UNDEFINED = -1

  1_BEAT_TAP_TIME   = 1000 / (HostTempo / 60)
  4_BEATS_TAP_TIME  = 4 * 1_BEAT_TAP_TIME

  TAP_IMMEDIATE = 0
  TAP_1_BAR  = 1
  TAP_4_BARS = 2

  STEP_LOOP = 1
  LOOP_1 = 1
  LOOP_2 = 2
  LOOP_3 = 3
  LOOP_4 = 4

  STEP_GROUP = 2
  GROUP_M = 1
  GROUP_1 = 2
  GROUP_2 = 3
  GROUP_3 = 4
  GROUP_4 = 5
  GROUP_5 = 6

  STEP_CLOCK_LENGTH = 3
  CLOCK_LENGTH_2  = 2
  CLOCK_LENGTH_4  = 4
  CLOCK_LENGTH_8  = 8
  CLOCK_LENGTH_10 = 10
  CLOCK_LENGTH_12 = 12
  CLOCK_LENGTH_16 = 16

  STEP_GTL_SENDS = 4
  GTL_SENDS_GUITAR           = 1
  GTL_SENDS_MIC              = 2
  GTL_SENDS_MIC_AND_GUITAR   = 3
  GTL_SENDS_KEYBOARD         = 4
  GTL_SENDS_MIC_AND_KEYBOARD = 5

  STEP_INSTR_FX = 5
  INSTR_FX_1 = 1
  INSTR_FX_2 = 2
  INSTR_FX_3 = 3
  INSTR_FX_4 = 4
  INSTR_FX_5 = 5
  INSTR_FX_6 = 6

  STEP_REC_MODE = 6
  REC_MODE_RECORD          = 1
  REC_MODE_OVERDUB         = 2
  REC_MODE_RECORD_AND_MUTE = 3

  FIRST_STEP = STEP_LOOP
  LAST_STEP  = STEP_GROUP

  GTL_CHANNEL = 0 // Will be displayed as channel 1 in GTL!
  BB_CHANNEL  = 0

  ON_OFF_DELAY = 0

  GTL_SELECT_GROUP_M = 48
  GTL_SELECT_GROUP_1 = 49
  GTL_SELECT_GROUP_2 = 50
  GTL_SELECT_GROUP_3 = 51
  GTL_SELECT_GROUP_4 = 52
  GTL_SELECT_GROUP_5 = 53

  GTL_SELECT_LOOP_1 = 54
  GTL_SELECT_LOOP_2 = 55
  GTL_SELECT_LOOP_3 = 56
  GTL_SELECT_LOOP_4 = 57
@End

@InitVariables
  cycleLength = 0
  lastActivatedCycle = 0
  currentStep = FIRST_STEP

  lastSelectedGroup       = UNDEFINED
  lastSelectedLoop        = UNDEFINED
  lastSelectedClockLength = UNDEFINED
  lastSelectedGtlSends    = UNDEFINED
  lastSelectedInstrFx     = UNDEFINED
  lastSelectedRecMode     = UNDEFINED

  groupInputs       = []
  loopInputs        = []
  clockLengthInputs = []
  gtlSendsInputs    = []
  instrFxInputs     = []
  recModeInputs     = []

  Call @InitTestData
@End

@InitTestData
  groupInputs[0]       = GROUP_1
  loopInputs[0]        = LOOP_1
  clockLengthInputs[0] = 3
  gtlSendsInputs[0]    = 2
  instrFxInputs[0]     = 1
  recModeInputs[0]     = 2

  groupInputs[1]       = GROUP_M
  loopInputs[1]        = LOOP_1
  clockLengthInputs[1] = 3
  gtlSendsInputs[1]    = 2
  instrFxInputs[1]     = 1
  recModeInputs[1]     = 2

  groupInputs[2]       = GROUP_2
  loopInputs[2]        = LOOP_3
  clockLengthInputs[2] = 3
  gtlSendsInputs[2]    = 2
  instrFxInputs[2]     = 1
  recModeInputs[2]     = 2

  cycleLength = 3
@End

@IlluminateAllbuttons
  SendMidiNoteOn BB_CHANNEL, BB_NOTE_A, 100
  SendMidiNoteOn BB_CHANNEL, BB_NOTE_B, 100
  SendMidiNoteOn BB_CHANNEL, BB_NOTE_C, 100
  SendMidiNoteOn BB_CHANNEL, BB_NOTE_D, 100
@End

@OnMidiNoteOn
  buttonPressedStartTime = SystemTime // Time at which button was pressed down
@End

@OnMidiNoteOff
  buttonPressedTime = SystemTime - buttonPressedStartTime

  If buttonPressedTime >= 4_BEATS_TAP_TIME
    Log {4 bars}
    tapType = TAP_4_BARS
  Elseif buttonPressedTime >= 1_BEAT_TAP_TIME
    Log {1 bar}
    tapType = TAP_1_BAR
  Else
    Log {Immediate}
    tapType = TAP_IMMEDIATE
  Endif

  Call @DispatchButtonPress
@End

@DispatchButtonPress
  wrongInputDetected = YES

  if MidiNote = BB_NOTE_D
    if tapType = TAP_IMMEDIATE
      Call @ArmCycle
    elseif tapType = TAP_4_BARS
      Call @AddCycle
    endif
  else
    if currentStep = STEP_LOOP
      Call @MapUserInputToLoop
    elseif currentStep = STEP_GROUP
      Call @MapUserInputToGroup
    elseif currentStep = STEP_CLOCK_LENGTH
      Call @MapUserInputToClockLength
    elseif currentStep = STEP_GTL_SENDS
      Call @MapUserInputToGtlSends
    elseif currentStep = STEP_INSTR_FX
      Call @MapUserInputToInstrFx
    elseif currentStep = STEP_REC_MODE
      Call @MapUserInputToRecMode
    endif

    if wrongInputDetected = YES
      Log {Wrong input! Try again.}
    else
      if currentStep < LAST_STEP
        Inc currentStep
      else
        Call @AddCycle
      endif

      Call @AskForInput
    endif
  endif
@End

@MapUserInputToGtlSends
  if tapType = TAP_IMMEDIATE
    if MidiNote = BB_NOTE_A
      lastSelectedGtlSends = GTL_SENDS_GUITAR
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedGtlSends = GTL_SENDS_MIC
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedGtlSends = GTL_SENDS_MIC_AND_GUITAR
      wrongInputDetected = NO
    endif
  elseif tapType = TAP_1_BAR
    if MidiNote = BB_NOTE_A
      lastSelectedGtlSends = GTL_SENDS_KEYBOARD
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      // Some day maybe some voice FX, e.g. Vocoder?
    elseif MidiNote = BB_NOTE_C
      lastSelectedGtlSends = GTL_SENDS_MIC_AND_KEYBOARD
      wrongInputDetected = NO
    endif
  endif
@End

@MapUserInputToRecMode
  if tapType = TAP_IMMEDIATE
    if MidiNote = BB_NOTE_A
      lastSelectedRecMode = REC_MODE_RECORD
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedRecMode = REC_MODE_OVERDUB
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      // TODO: REC_MODE_ADVANCED
    endif
  elseif tapType = TAP_1_BAR
    if MidiNote = BB_NOTE_A
      lastSelectedRecMode = REC_MODE_RECORD_AND_MUTE
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      // Nothing
    elseif MidiNote = BB_NOTE_C
      // TODO: REC_MODE_ADVANCED_AND_MUTE
    endif
  endif
@End

@MapUserInputToInstrFx
  if tapType = TAP_IMMEDIATE
    if MidiNote = BB_NOTE_A
      lastSelectedInstrFx = INSTR_FX_1
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedInstrFx = INSTR_FX_2
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedInstrFx = INSTR_FX_3
      wrongInputDetected = NO
    endif
  elseif tapType = TAP_1_BAR
    if MidiNote = BB_NOTE_A
      lastSelectedInstrFx = INSTR_FX_4
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedInstrFx = INSTR_FX_5
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedInstrFx = INSTR_FX_6
      wrongInputDetected = NO
    endif
  endif
@End

@MapUserInputToLoop
  Log {---}, tapType
  if tapType = TAP_IMMEDIATE
    if MidiNote = BB_NOTE_A
      lastSelectedLoop = LOOP_1
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedLoop = LOOP_2
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedLoop = LOOP_3
      wrongInputDetected = NO
    endif
  elseif tapType = TAP_1_BAR
    if MidiNote = BB_NOTE_A
      lastSelectedLoop = LOOP_4
      wrongInputDetected = NO
    endif
  endif
@End

@MapUserInputToClockLength
  if tapType = TAP_IMMEDIATE
    if MidiNote = BB_NOTE_A
      lastSelectedClockLength = CLOCK_LENGTH_2
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedClockLength = CLOCK_LENGTH_4
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedClockLength = CLOCK_LENGTH_8
      wrongInputDetected = NO
    endif
  elseif tapType = TAP_1_BAR
    if MidiNote = BB_NOTE_A
      lastSelectedClockLength = CLOCK_LENGTH_10
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedClockLength = CLOCK_LENGTH_12
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedClockLength = CLOCK_LENGTH_16
      wrongInputDetected = NO
    endif
  endif
@End

@MapUserInputToGroup
  if tapType = TAP_IMMEDIATE
    if MidiNote = BB_NOTE_A
      lastSelectedGroup = GROUP_1
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedGroup = GROUP_2
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedGroup = GROUP_3
      wrongInputDetected = NO
    endif
  elseif tapType = TAP_1_BAR
    if MidiNote = BB_NOTE_A
      lastSelectedGroup = GROUP_M
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedGroup = GROUP_4
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedGroup = GROUP_5
      wrongInputDetected = NO
    endif
  endif
@End

@AskForInput
  if currentStep = STEP_GROUP
    Log {Please select group.}
  elseif currentStep = STEP_LOOP
    Log {Please select loop.}
  elseif currentStep = STEP_CLOCK_LENGTH
    Log {Please select clock length.}
  elseif currentStep = STEP_GTL_SENDS
    Log {Please select GTL sends.}
  elseif currentStep = STEP_INSTR_FX
    Log {Please select instr fx.}
  elseif currentStep = STEP_REC_MODE
    Log {Please select record mode.}
  endif
@End

@AddCycle
  configPartMissing = NO

  if lastSelectedLoop = UNDEFINED
    configPartMissing = YES
    Log {No loop selected yet}
  else
    Log {Add loop}, lastSelectedLoop
    loopInputs[cycleLength] = lastSelectedLoop
  endif

  if lastSelectedGroup = UNDEFINED
    configPartMissing = YES
    Log {No group selected yet}
  else
    groupInputs[cycleLength] = lastSelectedGroup
  endif

//  if lastSelectedGtlSends = UNDEFINED
//    configPartMissing = YES
//    Log {No GTL sends selected yet}
//  else
//    gtlSendsInputs[cycleLength] = lastSelectedGtlSends
//  endif
//
//  if lastSelectedRecMode = UNDEFINED
//    configPartMissing = YES
//    Log {No rec mode selected yet}
//  else
//    recModeInputs[cycleLength] = lastSelectedRecMode
//  endif
//
//  if lastSelectedInstrFx = UNDEFINED
//    configPartMissing = YES
//    Log {No instr fx selected yet}
//  else
//    instrFxInputs[cycleLength] = lastSelectedInstrFx
//  endif
//
//  if lastSelectedClockLength = UNDEFINED
//    configPartMissing = YES
//    Log {No clock length selected yet}
//  else
//    clockLengthInputs[cycleLength] = lastSelectedClockLength
//  endif

  if configPartMissing = NO
    currentStep = FIRST_STEP
    Inc cycleLength

    Log {Cycle added!}
  endif
@End

@ArmCycle
  if cycleLength = 0
    Log {No cycles provided yet! Please run through at least one configuration cycle.}
  elseif lastActivatedCycle = cycleLength
    Log {No cycle left. You can add new cycles whenever you like.}
  else
    Log {Arming cycle #}, lastActivatedCycle

    Call @ArmGroup // Needs to be before @ArmLoop!
    Call @ArmLoop
//    Call @ArmClockLength
//    Call @ArmGtlSends
//    Call @ArmInstrFx
//    Call @ArmRecMode

    Inc lastActivatedCycle
  endif
@End

@ArmLoop
  currentLoop = loopInputs[lastActivatedCycle]
  Log {Current loop: }, currentLoop

  if currentLoop = LOOP_1
    midiToSend = GTL_SELECT_LOOP_1
  elseif currentLoop = LOOP_2
    midiToSend = GTL_SELECT_LOOP_2
  elseif currentLoop = LOOP_3
    midiToSend = GTL_SELECT_LOOP_3
  elseif currentLoop = LOOP_4
    midiToSend = GTL_SELECT_LOOP_4
  endif

  Log {Activating loop by sending MIDI to GTL: }, midiToSend

  SendMidiNoteOn  GTL_CHANNEL, midiToSend, 100
  SendMidiNoteOff GTL_CHANNEL, midiToSend, 0, ON_OFF_DELAY
@End

@ArmGroup
  currentGroup = groupInputs[lastActivatedCycle]

  if currentGroup = GROUP_M
    midiToSend = GTL_SELECT_GROUP_M
  elseif currentGroup = GROUP_1
    midiToSend = GTL_SELECT_GROUP_1
  elseif currentGroup = GROUP_2
    midiToSend = GTL_SELECT_GROUP_2
  elseif currentGroup = GROUP_3
    midiToSend = GTL_SELECT_GROUP_3
  elseif currentGroup = GROUP_4
    midiToSend = GTL_SELECT_GROUP_4
  elseif currentGroup = GROUP_5
    midiToSend = GTL_SELECT_GROUP_5
  endif

  Log {Activating group by sending MIDI to GTL: }, midiToSend

  SendMidiNoteOn  GTL_CHANNEL, midiToSend, 100
  SendMidiNoteOff GTL_CHANNEL, midiToSend, 0, ON_OFF_DELAY
@End

@ArmClockLength
  currentClockLength = clockLengthInputs[lastActivatedCycle]
  Log {- Clock length: }, currentClockLength
@End

@ArmGtlSends
  currentGtlSends = groupInputs[lastActivatedCycle]
  Log {- GTL sends: }, currentGtlSends
@End

@ArmInstrFx
  currentInstrFx = instrFxInputs[lastActivatedCycle]
  Log {- Instr fx: }, currentInstrFx
@End

@ArmRecMode
  currentRecMode = recModeInputs[lastActivatedCycle]
  Log {- Rec mode: }, currentRecMode
@End
