// Make sure to start the BlueBoard while pressing the B button!
@OnLoad
  SetShortName {GTLWizard}

  Call @InitConstants
  Call @InitVariables
  Call @InitGtlMidiCodes
  Call @InitAumMidiCodes

  Call @ResetGtlSession
  Call @IlluminateAllbuttons

  midiToSend = AUM_WELCOME
  Call @AnnounceMidi

  Call @AskForInput

  // Uncomment this to run through some settings quickly, so you can check whether they are applied correctly
  Call @InitTestData
@End

@InitConstants
  UNDEFINED = -1

  // Do not use the notes 60, 62, 64, and 65 for anything else (like MIDI bindings), as they are used for illuminating the BlueBoard buttons (see @IlluminateAllbuttons)!
  BB_NOTE_A = 60
  BB_NOTE_B = 62
  BB_NOTE_C = 64
  BB_NOTE_D = 65

  1_BEAT_TAP_TIME   = 1000 / (HostTempo / 60)
  4_BEATS_TAP_TIME  = 4 * 1_BEAT_TAP_TIME

  TAP_IMMEDIATE = 0
  TAP_1_BAR  = 1
  TAP_4_BARS = 2

  STEP_LOOP = 1
  LOOP_1 = 1
  LOOP_2 = 2
  LOOP_3 = 3
  LOOP_4 = 4

  STEP_GROUP = 2
  GROUP_M = 1
  GROUP_1 = 2
  GROUP_2 = 3
  GROUP_3 = 4
  GROUP_4 = 5
  GROUP_5 = 6

  STEP_CLOCK_LENGTH = 3
  CLOCK_LENGTH_1  = 1
  CLOCK_LENGTH_2  = 2
  CLOCK_LENGTH_4  = 4
  CLOCK_LENGTH_8  = 8
  CLOCK_LENGTH_10 = 10
  CLOCK_LENGTH_12 = 12
  CLOCK_LENGTH_16 = 16

  STEP_REC_SENDS = 4
  REC_SENDS_GUITAR           = 1
  REC_SENDS_MIC              = 2
  REC_SENDS_MIC_AND_GUITAR   = 3
  REC_SENDS_KEYBOARD         = 4
  REC_SENDS_MIC_AND_KEYBOARD = 5

  STEP_INSTR_FX = 5
  INSTR_FX_1 = 1
  INSTR_FX_2 = 2
  INSTR_FX_3 = 3
  INSTR_FX_4 = 4
  INSTR_FX_5 = 5
  INSTR_FX_6 = 6

  STEP_REC_MODE = 6
  REC_MODE_RECORD_OVERDUB     = 1
  REC_MODE_RECORD_MUTE        = 2
  REC_MODE_RECORD_SELECT_NEXT = 3

  FIRST_STEP = STEP_LOOP
  LAST_STEP  = STEP_REC_MODE

  // MIDI channels => Be aware that in the apps all channels are displayed as +1! So GTL channel will display 1 (instead of 0).
  BB_CHANNEL  = 0 // BlueBoard (listens only to channel 0)
  GTL_CHANNEL = 1 // Group The Loop

  // Feedback (Chameleon with preset "Group The Loop Wizard") => Make sure that AUM only sends this channel (3) to the respective Chameleon instance!
  // Chameleon only supports 34 audio files per preset (see https://forum.audiob.us/discussion/comment/835351/#Comment_835351).
  // So we have to load more than one, each with its own channel.
  FB_CHANNEL_0_TO_33  = 2
  FB_CHANNEL_34_TO_XX = 3
@End

// These are the codes that are sent as MIDI to GTL.
// GTL needs to have respective MIDI bindings assigned to these codes!
@InitGtlMidiCodes
  GTL_SELECT_LOOP_QUESTION = 42
  GTL_SELECT_LOOP_1 = 6
  GTL_SELECT_LOOP_2 = 7
  GTL_SELECT_LOOP_3 = 8
  GTL_SELECT_LOOP_4 = 9

  GTL_SELECT_GROUP_QUESTION = 43
  GTL_SELECT_GROUP_M = 0
  GTL_SELECT_GROUP_1 = 1
  GTL_SELECT_GROUP_2 = 2
  GTL_SELECT_GROUP_3 = 3
  GTL_SELECT_GROUP_4 = 4
  GTL_SELECT_GROUP_5 = 5

  GTL_DECREASE_CLOCK = 10
  GTL_INCREASE_CLOCK = 11
  GTL_SET_CLOCK_2  = 33
  GTL_SET_CLOCK_4  = 34
  GTL_SET_CLOCK_8  = 35
  GTL_SET_CLOCK_10 = 36
  GTL_SET_CLOCK_12 = 37
  GTL_SET_CLOCK_16 = 38

  GTL_RECORD_OVERDUB     = 12
  GTL_RECORD_MUTE        = 13
  GTL_RECORD_SELECT_NEXT = 14

  GTL_RESET_SESSION = 15
@End

@InitAumMidiCodes
  AUM_SEND_GUITAR           = 16
  AUM_SEND_MIC              = 17
  AUM_SEND_MIC_AND_GUITAR   = 18
  AUM_SEND_KEYBOARD         = 19
  AUM_SEND_MIC_AND_KEYBOARD = 20

  AUM_GUITAR_FX_1 = 21
  AUM_GUITAR_FX_2 = 22
  AUM_GUITAR_FX_3 = 23
  AUM_GUITAR_FX_4 = 24
  AUM_GUITAR_FX_5 = 25
  AUM_GUITAR_FX_6 = 26

  AUM_KEYBOARD_FX_1 = 27
  AUM_KEYBOARD_FX_2 = 28
  AUM_KEYBOARD_FX_3 = 29
  AUM_KEYBOARD_FX_4 = 30
  AUM_KEYBOARD_FX_5 = 31
  AUM_KEYBOARD_FX_6 = 32

  AUM_WELCOME = 39
  AUM_CYCLE_ARMED = 40
  AUM_CYCLE_ADDED_AGAIN = 41
@End

@InitVariables
  midiToSend = UNDEFINED
  midiDelay = 0

  stackSize = 0
  lastActivatedStackId = 0 // TODO: Shouldn't this be UNDEFINED?
  currentStep = FIRST_STEP

  currentClockLength = 1 // GTL sets clock length to 1 when resetting session

  lastSelectedGroup       = UNDEFINED
  lastSelectedLoop        = UNDEFINED
  lastSelectedClockLength = UNDEFINED
  lastSelectedRecSends    = UNDEFINED
  lastSelectedInstrFx     = UNDEFINED
  lastSelectedRecMode     = UNDEFINED

  groupStack       = []
  loopStack        = []
  clockLengthStack = []
  gtlSendsStack    = []
  instrFxStack     = []
  recModeStack     = []
@End

@InitTestData
  // Percussion
  groupStack[0]       = GROUP_M
  loopStack[0]        = LOOP_1
  clockLengthStack[0] = CLOCK_LENGTH_1
  gtlSendsStack[0]    = REC_SENDS_KEYBOARD
  instrFxStack[0]     = AUM_KEYBOARD_FX_3
  recModeStack[0]     = REC_MODE_RECORD_OVERDUB

  // Verse 1
  groupStack[1]       = GROUP_1
  loopStack[1]        = LOOP_1
  clockLengthStack[1] = CLOCK_LENGTH_8
  gtlSendsStack[1]    = REC_SENDS_GUITAR
  instrFxStack[1]     = AUM_GUITAR_FX_3
  recModeStack[1]     = REC_MODE_RECORD_OVERDUB

  // Verse 1 (repeat)
  groupStack[2]       = GROUP_1
  loopStack[2]        = LOOP_2
  clockLengthStack[2] = CLOCK_LENGTH_8
  gtlSendsStack[2]    = REC_SENDS_MIC_AND_KEYBOARD
  instrFxStack[2]     = AUM_KEYBOARD_FX_5
  recModeStack[2]     = REC_MODE_RECORD_OVERDUB

  // Go manually to chorus!

  // Verse 2
  groupStack[3]       = GROUP_2
  loopStack[3]        = LOOP_1
  clockLengthStack[3] = CLOCK_LENGTH_10
  gtlSendsStack[3]    = REC_SENDS_MIC_AND_GUITAR
  instrFxStack[3]     = AUM_GUITAR_FX_2
  recModeStack[3]     = REC_MODE_RECORD_OVERDUB

  // Verse 2 (repeat)
  groupStack[4]       = GROUP_2
  loopStack[4]        = LOOP_2
  clockLengthStack[4] = CLOCK_LENGTH_10
  gtlSendsStack[4]    = REC_SENDS_MIC_AND_GUITAR
  instrFxStack[4]     = AUM_GUITAR_FX_2
  recModeStack[4]     = REC_MODE_RECORD_OVERDUB

  // Bridge
  groupStack[5]       = GROUP_3
  loopStack[5]        = LOOP_1
  clockLengthStack[5] = CLOCK_LENGTH_8
  gtlSendsStack[5]    = REC_SENDS_MIC_AND_KEYBOARD
  instrFxStack[5]     = AUM_KEYBOARD_FX_5
  recModeStack[5]     = REC_MODE_RECORD_OVERDUB

  // Bridge (repeat)
  groupStack[6]       = GROUP_3
  loopStack[6]        = LOOP_2
  clockLengthStack[6] = CLOCK_LENGTH_8
  gtlSendsStack[6]    = REC_SENDS_MIC_AND_KEYBOARD
  instrFxStack[6]     = AUM_KEYBOARD_FX_5
  recModeStack[6]     = REC_MODE_RECORD_OVERDUB

  // Go manually to verse 1

  // Go manually to chorus!

  stackSize = 8
@End

@ResetGtlSession
  midiToSend = GTL_RESET_SESSION
  Log {Resetting session by sending MIDI to GTL: }, midiToSend
  Call @SendMidiNoteOnOff
@End

@SendMidiNoteOnOff
  SendMidiNoteOn  GTL_CHANNEL, midiToSend, 100
  SendMidiNoteOff GTL_CHANNEL, midiToSend, 0, 0
@End

@AnnounceMidi
  Log {Announcing MIDI now: }, midiToSend

  if midiToSend < 34
    channel = FB_CHANNEL_0_TO_33
  else
    channel = FB_CHANNEL_34_TO_XX
  endif

  SendMidiNoteOn  channel, midiToSend, 100, midiDelay
  SendMidiNoteOff channel, midiToSend, 0, midiDelay + 3000 // Chameleon needs a delay between on and off, otherwise it doesn't trigger. To make sure the samples are played all through, we use quite a long delay.
@End

@IlluminateAllbuttons
  SendMidiNoteOn BB_CHANNEL, BB_NOTE_A, 100
  SendMidiNoteOn BB_CHANNEL, BB_NOTE_B, 100
  SendMidiNoteOn BB_CHANNEL, BB_NOTE_C, 100
  SendMidiNoteOn BB_CHANNEL, BB_NOTE_D, 100
@End

@OnMidiNoteOn
  buttonPressedStartTime = SystemTime // Time at which button was pressed down
@End

@OnMidiNoteOff
  buttonPressedTime = SystemTime - buttonPressedStartTime

  If buttonPressedTime >= 4_BEATS_TAP_TIME
    tapType = TAP_4_BARS
  Elseif buttonPressedTime >= 1_BEAT_TAP_TIME
    tapType = TAP_1_BAR
  Else
    tapType = TAP_IMMEDIATE
  Endif

  Call @DispatchButtonPress
@End

@DispatchButtonPress
  wrongInputDetected = YES

  if MidiNote = BB_NOTE_D
    if tapType = TAP_IMMEDIATE
      Call @ArmCycle
    elseif tapType = TAP_4_BARS
      Call @AddCycle
    endif
  else
    if currentStep = STEP_LOOP
      Call @MapUserInputToLoop
    elseif currentStep = STEP_GROUP
      Call @MapUserInputToGroup
    elseif currentStep = STEP_CLOCK_LENGTH
      Call @MapUserInputToClockLength
    elseif currentStep = STEP_REC_SENDS
      Call @MapUserInputToRecSends
    elseif currentStep = STEP_INSTR_FX
      Call @MapUserInputToInstrFx
    elseif currentStep = STEP_REC_MODE
      Call @MapUserInputToRecMode
    endif

    if wrongInputDetected = YES
      Log {Wrong input! Try again.}
    else
      if currentStep < LAST_STEP
        Inc currentStep
      else
        Call @AddCycle
      endif

      Call @AskForInput
    endif
  endif
@End

@MapUserInputToRecSends
  if tapType = TAP_IMMEDIATE
    if MidiNote = BB_NOTE_A
      lastSelectedRecSends = REC_SENDS_GUITAR
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedRecSends = REC_SENDS_MIC
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedRecSends = REC_SENDS_MIC_AND_GUITAR
      wrongInputDetected = NO
    endif
  elseif tapType = TAP_1_BAR
    if MidiNote = BB_NOTE_A
      lastSelectedRecSends = REC_SENDS_KEYBOARD
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      // Some day maybe some voice FX, e.g. Vocoder?
    elseif MidiNote = BB_NOTE_C
      lastSelectedRecSends = REC_SENDS_MIC_AND_KEYBOARD
      wrongInputDetected = NO
    endif
  endif

  if wrongInputDetected = NO
    Call @AnnounceSelectedRecSends
  endif
@End

@MapUserInputToRecMode
  if tapType = TAP_IMMEDIATE
    if MidiNote = BB_NOTE_A
      lastSelectedRecMode = REC_MODE_RECORD_OVERDUB
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedRecMode = REC_MODE_RECORD_MUTE
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedRecMode = REC_MODE_RECORD_SELECT_NEXT
      wrongInputDetected = NO
    endif
  elseif tapType = TAP_1_BAR
    // TODO: Advanced stuff!
  endif

  if wrongInputDetected = NO
    Call @AnnounceSelectedRecMode
  endif
@End

@MapUserInputToInstrFx
  if tapType = TAP_IMMEDIATE
    if MidiNote = BB_NOTE_A
      lastSelectedInstrFx = INSTR_FX_1
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedInstrFx = INSTR_FX_2
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedInstrFx = INSTR_FX_3
      wrongInputDetected = NO
    endif
  elseif tapType = TAP_1_BAR
    if MidiNote = BB_NOTE_A
      lastSelectedInstrFx = INSTR_FX_4
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedInstrFx = INSTR_FX_5
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedInstrFx = INSTR_FX_6
      wrongInputDetected = NO
    endif
  endif

  if wrongInputDetected = NO
    Call @AnnounceSelectedInstrFx
  endif
@End

@MapUserInputToLoop
  if tapType = TAP_IMMEDIATE
    if MidiNote = BB_NOTE_A
      lastSelectedLoop = LOOP_1
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedLoop = LOOP_2
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedLoop = LOOP_3
      wrongInputDetected = NO
    endif
  elseif tapType = TAP_1_BAR
    if MidiNote = BB_NOTE_A
      lastSelectedLoop = LOOP_4
      wrongInputDetected = NO
    endif
  endif

  if wrongInputDetected = NO
    Call @AnnounceSelectedLoop
  endif
@End

@MapUserInputToClockLength
  if tapType = TAP_IMMEDIATE
    if MidiNote = BB_NOTE_A
      lastSelectedClockLength = CLOCK_LENGTH_2
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedClockLength = CLOCK_LENGTH_4
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedClockLength = CLOCK_LENGTH_8
      wrongInputDetected = NO
    endif
  elseif tapType = TAP_1_BAR
    if MidiNote = BB_NOTE_A
      lastSelectedClockLength = CLOCK_LENGTH_10
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedClockLength = CLOCK_LENGTH_12
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedClockLength = CLOCK_LENGTH_16
      wrongInputDetected = NO
    endif
  endif

  if wrongInputDetected = NO
    Call @AnnounceSelectedClockLength
  endif
@End

@MapUserInputToGroup
  if tapType = TAP_IMMEDIATE
    if MidiNote = BB_NOTE_A
      lastSelectedGroup = GROUP_1
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedGroup = GROUP_2
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedGroup = GROUP_3
      wrongInputDetected = NO
    endif
  elseif tapType = TAP_1_BAR
    if MidiNote = BB_NOTE_A
      lastSelectedGroup = GROUP_M
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_B
      lastSelectedGroup = GROUP_4
      wrongInputDetected = NO
    elseif MidiNote = BB_NOTE_C
      lastSelectedGroup = GROUP_5
      wrongInputDetected = NO
    endif
  endif

  if wrongInputDetected = NO
    Call @AnnounceSelectedGroup
  endif
@End

@AskForInput
  if currentStep = STEP_LOOP
    midiToSend = GTL_SELECT_LOOP_QUESTION

    if lastActivatedStackId
      midiDelay = 1000 // Wait for "Welcome" message
    else
      midiDelay = 3000
    endif

    Call @AnnounceMidi
    midiDelay = 0
  elseif currentStep = STEP_GROUP
    midiToSend = GTL_SELECT_GROUP_QUESTION
    midiDelay = 1000
    Call @AnnounceMidi
    midiDelay = 0
  elseif currentStep = STEP_CLOCK_LENGTH
    Log {Which clock length?}
  elseif currentStep = STEP_REC_SENDS
    Log {Which GTL sends?}
  elseif currentStep = STEP_INSTR_FX
    Log {Which instr FX?}
  elseif currentStep = STEP_REC_MODE
    Log {Which record mode?}
  endif
@End

@AddCycle
  configPartMissing = NO

  if lastSelectedLoop = UNDEFINED
    configPartMissing = YES
    Log {No loop selected yet!}
  else
    loopStack[stackSize] = lastSelectedLoop
  endif

  if lastSelectedGroup = UNDEFINED
    configPartMissing = YES
    Log {No group selected yet!}
  else
    groupStack[stackSize] = lastSelectedGroup
  endif

  if lastSelectedClockLength = UNDEFINED
    configPartMissing = YES
    Log {No clock length selected yet!}
  else
    clockLengthStack[stackSize] = lastSelectedClockLength
  endif

  if lastSelectedRecSends = UNDEFINED
    configPartMissing = YES
    Log {No GTL sends selected yet!}
  else
    gtlSendsStack[stackSize] = lastSelectedRecSends
  endif

  if lastSelectedInstrFx = UNDEFINED
    configPartMissing = YES
    Log {No instr fx selected yet!}
  else
    instrFxStack[stackSize] = lastSelectedInstrFx
  endif

  if lastSelectedRecMode = UNDEFINED
    configPartMissing = YES
    Log {No rec mode selected yet!}
  else
    recModeStack[stackSize] = lastSelectedRecMode
  endif

  if configPartMissing = NO
    currentStep = FIRST_STEP
    Inc stackSize

    midiToSend = AUM_CYCLE_ADDED_AGAIN
    midiDelay = 1500
    Call @AnnounceMidi
    midiDelay = 0

    Log {Hooray! Cycle added! Loop: }, lastSelectedLoop, {, group: }, lastSelectedGroup, {, clock length: }, lastSelectedClockLength, {, record sends: }, lastSelectedRecSends, {, instrument FX: }, lastSelectedInstrFx, {, recording mode: }, lastSelectedRecMode, {! Another one?}
  endif
@End

@ArmCycle
  if stackSize = 0
    Log {No cycles provided yet! Please run through at least one configuration cycle.}
  elseif lastActivatedStackId = stackSize
    Log {No cycle left. You can add new cycles whenever you like.}
  else
    Log {Arming cycle #}, lastActivatedStackId

    Call @ArmGroup // Needs to be before @ArmLoop!
    Call @ArmLoop
    Call @ArmClockLength
    Call @ArmRecSends
    Call @ArmInstrFx
    Call @ArmRecMode

    midiToSend = AUM_CYCLE_ARMED
    Call @AnnounceMidi

    Inc lastActivatedStackId
  endif
@End

@AnnounceSelectedLoop
  newLoop = lastSelectedLoop
  Call @MapLoopToMidi

  Call @AnnounceMidi
@End

@AnnounceSelectedGroup
  newGroup = lastSelectedGroup
  Call @MapGroupToMidi

  Call @AnnounceMidi
@End

@AnnounceSelectedClockLength
  newClockLength = lastSelectedClockLength
  Call @MapClockLengthToMidi

  Call @AnnounceMidi
@End

@AnnounceSelectedRecSends
  newRecSends = lastSelectedRecSends
  Call @MapRecSendsToMidi

  Call @AnnounceMidi
@End

@AnnounceSelectedInstrFx
  newInstrFx = lastSelectedInstrFx
  Call @MapInstrFxToMidi

  Call @AnnounceMidi
@End

@AnnounceSelectedRecMode
  newRecMode = lastSelectedRecMode
  Call @MapRecModeToMidi

  Call @AnnounceMidi
@End

@ArmLoop
  newLoop = loopStack[lastActivatedStackId]
  Call @MapLoopToMidi

  // Log {Selecting loop by sending MIDI to GTL: }, midiToSend
  Call @SendMidiNoteOnOff
@End

@ArmGroup
  newGroup = groupStack[lastActivatedStackId]
  Call @MapGroupToMidi

  // Log {Selecting group by sending MIDI to GTL: }, midiToSend
  Call @SendMidiNoteOnOff
@End

@ArmClockLength
  newClockLength = clockLengthStack[lastActivatedStackId]
  Call @MapClockLengthToMidi

  // Log {Setting clock length from }, currentClockLength, { to }, newClockLength, { by sending MIDI to GTL: }, midiToSend, { (*}, timesToSend, {)}

  for i = 1 to timesToSend
    Call @SendMidiNoteOnOff
  endfor

  currentClockLength = newClockLength
@End

@ArmRecSends
  newRecSends = recSendsStack[lastActivatedStackId]
  Call @MapRecSendsToMidi

  // Log {Selecting record sends by sending MIDI to AUM: }, midiToSend
  Call @SendMidiNoteOnOff
@End

// TODO: Divide into @ArmKeyboardFX and @ArmGuitarFx?
@ArmInstrFx
  newInstrFx = instrFxStack[lastActivatedStackId]
  Call @MapInstrFxToMidi

  Call @SendMidiNoteOnOff
@End

@ArmRecMode
  newRecMode = recModeStack[lastActivatedStackId]
  Call @MapRecModeToMidi

  // Log {Starting record mode by sending MIDI to GTL: }, midiToSend

  Call @SendMidiNoteOnOff
@End

@MapLoopToMidi
  if newLoop = LOOP_1
    midiToSend = GTL_SELECT_LOOP_1
  elseif newLoop = LOOP_2
    midiToSend = GTL_SELECT_LOOP_2
  elseif newLoop = LOOP_3
    midiToSend = GTL_SELECT_LOOP_3
  elseif newLoop = LOOP_4
    midiToSend = GTL_SELECT_LOOP_4
  endif
@End

@MapGroupToMidi
  if newGroup = GROUP_M
    midiToSend = GTL_SELECT_GROUP_M
  elseif newGroup = GROUP_1
    midiToSend = GTL_SELECT_GROUP_1
  elseif newGroup = GROUP_2
    midiToSend = GTL_SELECT_GROUP_2
  elseif newGroup = GROUP_3
    midiToSend = GTL_SELECT_GROUP_3
  elseif newGroup = GROUP_4
    midiToSend = GTL_SELECT_GROUP_4
  elseif newGroup = GROUP_5
    midiToSend = GTL_SELECT_GROUP_5
  endif
@End

@MapClockLengthToMidi
  difference = newClockLength - currentClockLength

  if difference > 0
    midiToSend = GTL_INCREASE_CLOCK
    timesToSend = difference
  elseif difference < 0
    midiToSend = GTL_DECREASE_CLOCK
    timesToSend = difference * -1
  else
    timesToSend = 0
  Endif
@End

@MapRecSendsToMidi
  if newRecSends = REC_SENDS_GUITAR
    midiToSend = AUM_SEND_GUITAR
  elseif newRecSends = REC_SENDS_MIC
    midiToSend = AUM_SEND_MIC
  elseif newRecSends = REC_SENDS_MIC_AND_GUITAR
    midiToSend = AUM_SEND_MIC_AND_GUITAR
  elseif newRecSends = REC_SENDS_KEYBOARD
    midiToSend = AUM_SEND_KEYBOARD
  elseif newRecSends = REC_SENDS_MIC_AND_KEYBOARD
    midiToSend = AUM_SEND_MIC_AND_KEYBOARD
  endif
@End

@MapInstrFxToMidi
  if newRecSends = REC_SENDS_GUITAR or newRecSends = REC_SENDS_MIC_AND_GUITAR
    if newInstrFx = INSTR_FX_1
      midiToSend = AUM_GUITAR_FX_1
    elseif newInstrFx = INSTR_FX_2
      midiToSend = AUM_GUITAR_FX_2
    elseif newInstrFx = INSTR_FX_3
      midiToSend = AUM_GUITAR_FX_3
    elseif newInstrFx = INSTR_FX_4
      midiToSend = AUM_GUITAR_FX_4
    elseif newInstrFx = INSTR_FX_5
      midiToSend = AUM_GUITAR_FX_5
    elseif newInstrFx = INSTR_FX_6
      midiToSend = AUM_GUITAR_FX_6
    endif

    // Log {Selecting guitar FX by sending MIDI to AUM: }, midiToSend
  elseif newRecSends = REC_SENDS_KEYBOARD or newRecSends = REC_SENDS_MIC_AND_KEYBOARD
    if newInstrFx = INSTR_FX_1
      midiToSend = AUM_KEYBOARD_FX_1
    elseif newInstrFx = INSTR_FX_2
      midiToSend = AUM_KEYBOARD_FX_2
    elseif newInstrFx = INSTR_FX_3
      midiToSend = AUM_KEYBOARD_FX_3
    elseif newInstrFx = INSTR_FX_4
      midiToSend = AUM_KEYBOARD_FX_4
    elseif newInstrFx = INSTR_FX_5
      midiToSend = AUM_KEYBOARD_FX_5
    elseif newInstrFx = INSTR_FX_6
      midiToSend = AUM_KEYBOARD_FX_6
    endif

    // Log {Selecting keyboard FX by sending MIDI to AUM: }, midiToSend
  endif
@End

@MapRecModeToMidi
  if newRecMode = LOOP_1
    midiToSend = GTL_RECORD_OVERDUB
  elseif newRecMode = LOOP_2
    midiToSend = GTL_RECORD_MUTE
  elseif newRecMode = LOOP_3
    midiToSend = GTL_RECORD_SELECT_NEXT
  endif
@End
