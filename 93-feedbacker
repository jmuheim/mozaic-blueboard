// Feedbacker sends audio signals that are meant for the performer only, like ...
//
// Feedback is done through two instances of Chameleon: It would be nicer to have only one Chameleon instance, but it only supports 34 audio files per preset (see https://forum.audiob.us/discussion/comment/835351/#Comment_835351).
// So we have to load more than one, each with its own channel.
//
// - Midi event  0 to 33 is directed to channel 2 (Chameleon with preset "Group The Loop Wizard 1" loaded)
// - Midi event 34 to 67 is directed to channel 3 (Chameleon with preset "Group The Loop Wizard 2" loaded)
//
// Make sure that each Chameleon instance only receives from the respective channel (in AUM, in the instance's routing menu, use "Channel filter" to toggle all channels off except the appropriate one)!
//
// AUM routing:
// - Receives from ModeSwitcher
// - Recieves from StepSequencer
// - (mostly everything)
//
// Notes:
// - Chameleon needs a short delay between on and off, otherwise it doesn't trigger the audio sample. As we know the length of each sample, we don't have to account this.

@OnLoad
  SetShortName {93-Feedbacker}

  Call @InitSharedConstants
  Call @InitConstants
  Call @Reset
@End

@InitConstants
  AUDIO_OVERLAP_DURATION = 100 // All audio samples have some silence at the start and end. To make sound it sound smoother when multiple audios are announced together (e.g. FEEDBACK_SELECT and FEEDBACK_GROUP), we overlap the end of the previous with the start of the next audio.

  PAUSE_BETWEEN_FEEDBACKS = 500 // After a group of feedbacks was played, add some silence before the next group.

  // The length of the audio samples in ms (needed for playing them after each other)
  AUDIO_SAMPLES_LENGTHS[0]  =  432 // FEEDBACK_ZERO
  AUDIO_SAMPLES_LENGTHS[1]  =  480 // FEEDBACK_ONE
  AUDIO_SAMPLES_LENGTHS[2]  =  312 // FEEDBACK_TWO
  AUDIO_SAMPLES_LENGTHS[3]  =  432 // FEEDBACK_THREE
  AUDIO_SAMPLES_LENGTHS[4]  =  480 // FEEDBACK_FOUR
  AUDIO_SAMPLES_LENGTHS[5]  =  504 // FEEDBACK_FIVE
  AUDIO_SAMPLES_LENGTHS[6]  =  456 // FEEDBACK_SIX
  AUDIO_SAMPLES_LENGTHS[7]  =  504 // FEEDBACK_SEVEN
  AUDIO_SAMPLES_LENGTHS[8]  =  360 // FEEDBACK_EIGHT
  AUDIO_SAMPLES_LENGTHS[9]  =  480 // FEEDBACK_NINE
  AUDIO_SAMPLES_LENGTHS[10] =  336 // FEEDBACK_TEN
  AUDIO_SAMPLES_LENGTHS[11] =  480 // FEEDBACK_ELEVEN
  AUDIO_SAMPLES_LENGTHS[12] =  480 // FEEDBACK_TWELVE
  AUDIO_SAMPLES_LENGTHS[13] = 1032 // FEEDBACK_WELCOME
  AUDIO_SAMPLES_LENGTHS[14] =  936 // FEEDBACK_STEP_SEQUENCER_ACTIVE
  AUDIO_SAMPLES_LENGTHS[15] =  432 // FEEDBACK_SELECT
  AUDIO_SAMPLES_LENGTHS[16] =  350 // FEEDBACK_GROUP
  AUDIO_SAMPLES_LENGTHS[17] =  456 // FEEDBACK_UNKNOWN
  AUDIO_SAMPLES_LENGTHS[18] =  408 // FEEDBACK_INPUT
  AUDIO_SAMPLES_LENGTHS[19] =  600 // FEEDBACK_TRY_AGAIN
  AUDIO_SAMPLES_LENGTHS[20] =  456 // FEEDBACK_SELECTED
  AUDIO_SAMPLES_LENGTHS[21] =  360 // FEEDBACK_LOOP
@End

@InitVariables
  audioPlayingUntil = SystemTime

  delayForCurrentMidiOn  = 0
  delayForCurrentMidiOff = 0
@End

@Reset
  Call @InitVariables
@End

@OnSysex
  ReceiveSysex data
  sysexLength = SysexSize
  sysexTarget = data[0]
  sysexAction = data[1]

  if sysexTarget = MOZ_INST_FEEDBACKER
    if sysexAction = SYSEX_ANNOUNCE_FEEDBACK
      Call @IterateOverFeedbacks
    else
      Log {ERROR: Unknown sysexAction=}, sysexAction
    endif
  endif
@End

@IterateOverFeedbacks
  Log {@IterateOverFeedbacks}

  i = 2
  while i < sysexLength
    feedbackId = data[i]
    Call @CueFeedback
    Inc i
  endwhile

  audioPlayingUntil = audioPlayingUntil + PAUSE_BETWEEN_FEEDBACKS
@End

@CueFeedback
  Call @SetChannel

  feedbackLength = AUDIO_SAMPLES_LENGTHS[feedbackId]

  now = SystemTime
  if audioPlayingUntil < now // Not occupied anymore
    delayForCurrentMidiOn = 0 // Play right away
    audioPlayingUntil = now + feedbackLength
  else // Still occupied
    delayForCurrentMidiOn = audioPlayingUntil - now - AUDIO_OVERLAP_DURATION // Delay next feedback until the audio channel isn't occupied anymore
    audioPlayingUntil = audioPlayingUntil + feedbackLength - AUDIO_OVERLAP_DURATION
  endif

  delayForCurrentMidiOff = delayForCurrentMidiOn + feedbackLength

  Log {@CueFeedback feedbackId=}, feedbackId, {, feedbackLength=}, feedbackLength, {, now=}, now, {, delayForCurrentMidiOn=}, delayForCurrentMidiOn, {, delayForCurrentMidiOff=}, delayForCurrentMidiOff, {, audioPlayingUntil=}, audioPlayingUntil

  SendMidiNoteOn  channel, feedbackId, 127, delayForCurrentMidiOn
  SendMidiNoteOff channel, feedbackId,   0, delayForCurrentMidiOff
@End

@SetChannel
  if feedbackId < 34
    channel = MIDI_CHANNEL_FB_0_TO_33
  else
    channel = MIDI_CHANNEL_FB_34_TO_67
  endif
@End








//////////////////////////////////////////////////////////
// These constants are shared across all Mozaic scripts //
//////////////////////////////////////////////////////////
@InitSharedConstants
  UNDEFINED = -1

  MOZ_INST_FEEDBACKER = 93

  MIDI_CHANNEL_FB_0_TO_33  = 2
  MIDI_CHANNEL_FB_34_TO_67 = 3

  SYSEX_ANNOUNCE_FEEDBACK = 2
@End
