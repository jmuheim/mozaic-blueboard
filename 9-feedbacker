// Feedbacker
// ==========
//
// Installation:
// -------------
//
// - In AUM, in the "Mozaic" MIDI channel, click the "+1" button
// - Click the newly inserted "+" button, then "Audio Unit MIDI Processor" -> "Mozaic"
// - Click the newly inserted Mozaic button
// - Click "Code"
// - Replace the default code with the one in this file
// - Click "Upload"
// - Click the "MIDI Route" button (the "backwards S" in the window's menu bar)
// - Click "Mozaic @M2:1" (BlueBoard-Handler)
// - Click "Mozaic @M2:2" (GTL-Performer)
// - Close the window by pressing the "X" button
// - TODO: Create audio channel with Chameleon and load GTL-Performer preset, then route GTL-Performer's (Mozaic @M1:3) output to it
//
// About:
// ------
//
// Triggering some feature using the BlueBoard often will result in a visually perceivable feedback inside the front-most app (which usually will be GTL). For example, when arming the next loop in GTL, it will become orange. In some other cases (especially when running multiple apps side by side) there will be no such feedback. For example, when loading another guitar FX preset within Tonebridge (which runs as AUv3 within AUM, which itself is in the background).
// 
// As interacting with a foot controller can be a bit tricky at times, you may want to receive feedback in such a situation, so you can be sure that everything worked out as intented. While the BlueBoard's buttons can be illuminated to give feedback upon interaction, this seems to be [buggy](https://forum.audiob.us/discussion/comment/831829/#Comment_831829). So we're only using this feature for showing whether the microphone (button A) or the guitar (button D) is sent to GTL (a glowing button means it is sent to GTL).
// 
// Instead, we use a specific Chameleon preset (GTL Performer.spatch) which has a bunch of spoken words (or sentences) loaded in it. Those will be used to play audio feedback upon interacting with the script. For example, when short-tapping button A (to toggle whether the microphone is sent to GTL), you will hear "Sending microphone activated".

@OnLoad
  SetShortName {9-Feedbacker}

  Log {Set DEBUG=YES to see more runtime details}

  Call @InitSharedConstants
  Call @InitConstants
  Call @Reset
@End

@InitConstants
  DEBUG = NO // Has no effect here yet

  AUDIO_OVERLAP_DURATION = 150 // All audio samples have some silence at the start and end. To make sound it sound smoother when multiple audios are announced together (e.g. FEEDBACK_SELECT and FEEDBACK_GROUP), we overlap the end of the previous with the start of the next audio.

  PAUSE_BETWEEN_FEEDBACKS = 300 // After a group of feedbacks was played, add some silence before the next group.

  // The length of the audio samples in ms (needed for playing them after each other)
  AUDIO_SAMPLES_LENGTHS[0] = 336  // FEEDBACK_ZERO
  AUDIO_SAMPLES_LENGTHS[1] = 360  // FEEDBACK_ONE
  AUDIO_SAMPLES_LENGTHS[2] = 240  // FEEDBACK_TWO
  AUDIO_SAMPLES_LENGTHS[3] = 336  // FEEDBACK_THREE
  AUDIO_SAMPLES_LENGTHS[4] = 360  // FEEDBACK_FOUR
  AUDIO_SAMPLES_LENGTHS[5] = 408  // FEEDBACK_FIVE
  AUDIO_SAMPLES_LENGTHS[6] = 360  // FEEDBACK_SIX
  AUDIO_SAMPLES_LENGTHS[7] = 384  // FEEDBACK_SEVEN
  AUDIO_SAMPLES_LENGTHS[8] = 228  // FEEDBACK_EIGHT
  AUDIO_SAMPLES_LENGTHS[9] = 384  // FEEDBACK_NINE
  AUDIO_SAMPLES_LENGTHS[10] = 792 // FEEDBACK_WELCOME
  AUDIO_SAMPLES_LENGTHS[11] = 240 // FEEDBACK_GROUP
  AUDIO_SAMPLES_LENGTHS[12] = 288 // FEEDBACK_LOOP
  AUDIO_SAMPLES_LENGTHS[13] = 432 // FEEDBACK_CLOCK_LENGTH
  AUDIO_SAMPLES_LENGTHS[14] = 336 // FEEDBACK_GUITAR
  AUDIO_SAMPLES_LENGTHS[15] = 456 // FEEDBACK_MICROPHONE
  AUDIO_SAMPLES_LENGTHS[16] = 336 // FEEDBACK_SENDING
  AUDIO_SAMPLES_LENGTHS[17] = 336 // FEEDBACK_ACTIVATED
  AUDIO_SAMPLES_LENGTHS[18] = 408 // FEEDBACK_DEACTIVATED
  AUDIO_SAMPLES_LENGTHS[19] = 228 // FEEDBACK_ARMED
  AUDIO_SAMPLES_LENGTHS[20] = 102 // FEEDBACK_BEEP
@End

@InitVariables
  audioPlayingUntil = SystemTime

  delayForCurrentMidiOn  = 0
  delayForCurrentMidiOff = 0

  muted = NO
@End

@Reset
  Log {+----------+}
  Log {|Feedbacker|}
  Log {+----------+}

  Call @InitVariables
@End

@OnSysex
  ReceiveSysex sysexData
  sysexLength = SysexSize
  sysexAction = sysexData[0]

  if sysexAction = SYSEX_ANNOUNCE_FEEDBACK
    if muted
      Log {Muted (not giving any feedback)}
    else
      Call @IterateOverFeedbacks
    endif
  elseif sysexAction = SYSEX_MUTE_FEEDBACK
    muted = YES
  elseif sysexAction = SYSEX_UNMUTE_FEEDBACK
    muted = NO
  endif
@End

@IterateOverFeedbacks
  Log {@IterateOverFeedbacks}

  for i = 1 to sysexLength - 1 // Ignore first sysex argument (sysexAction)
    feedbackId = sysexData[i]
    Call @CueFeedback
  endfor

  audioPlayingUntil = audioPlayingUntil + PAUSE_BETWEEN_FEEDBACKS
@End

@CueFeedback
  feedbackLength = AUDIO_SAMPLES_LENGTHS[feedbackId]

  now = SystemTime
  if audioPlayingUntil < now // Not occupied anymore
    delayForCurrentMidiOn = 0 // Play right away
    audioPlayingUntil = now + feedbackLength
  else // Still occupied
    delayForCurrentMidiOn = audioPlayingUntil - now - AUDIO_OVERLAP_DURATION // Delay next feedback until the audio channel isn't occupied anymore
    audioPlayingUntil = audioPlayingUntil + feedbackLength - AUDIO_OVERLAP_DURATION
  endif

  delayForCurrentMidiOff = delayForCurrentMidiOn + feedbackLength

  Log {@CueFeedback feedbackId=}, feedbackId, {, feedbackLength=}, feedbackLength, {, now=}, now, {, delayForCurrentMidiOn=}, delayForCurrentMidiOn, {, delayForCurrentMidiOff=}, delayForCurrentMidiOff, {, audioPlayingUntil=}, audioPlayingUntil

  SendMidiNoteOn  MIDI_CHANNEL_FB, feedbackId, 127, delayForCurrentMidiOn
  SendMidiNoteOff MIDI_CHANNEL_FB, feedbackId,   0, delayForCurrentMidiOff
@End









//////////////////////////////////////////////////////////
// These constants are shared across all Mozaic scripts //
//////////////////////////////////////////////////////////
@InitSharedConstants
  UNDEFINED = -1

  SYSEX_ANNOUNCE_FEEDBACK = 9
  SYSEX_MUTE_FEEDBACK = 10
  SYSEX_UNMUTE_FEEDBACK = 11

  MIDI_CHANNEL_FB = 3
@End
