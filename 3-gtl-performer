// Group the Loop Performer
// ========================
//
// Installation:
// -------------
//
// - In AUM, in the "Mozaic" MIDI channel, click the "+1" button (scroll down if needed)
// - Click the newly inserted "+" button, then "Audio Unit MIDI Processor" -> "Mozaic"
// - Click the newly inserted Mozaic button
// - Click "Code"
// - Replace the default code with the one in this file
// - Click "Upload"
// - Click the "MIDI Route" button (the "backwards S" in the window's menu bar)
// - Click "Mozaic @M1:2" (BlueBoard-Handler)
// - Close the window by pressing the "X" button
// - Click the global "MIDI Route" button (the "backwards S" at the top right, or by accessing it through the main menu)
// - Route BlueBoard-Handler's (Mozaic @M1:3) output to "iRig BlueBoard Bluetooth"
// - Press "Close"
//
// About:
// ------
//
// GTL-Performer assists you in setting up a song inside GTL by providing shortcuts and conventions which will make sense for most songs.
//
// During the start of a song, usually you are very busy with singing and playing your instrument (guitar, keyboard, whatever). As such, you don't have any hands free to interact with GTL's GUI. But still, possibly right after the current recording, you want to the next loop to be armed (in the current or any other group), probably switch settings of you instrument (or switch to another instrument), etc. For this, GTL-Performer provides the most needed features at the tip of your toes, so you can control them even while having no hands free.
//
// Usually, after a song was successfully built up and has some recorded loops and groups, you will be able to keep your hands off your instrument(s) from time to time. This will then allow you to interact with GTL's GUI directly and do more sophisticated stuff manually. So GTL-Performer is not meant to assist you fully throughout a whole song. It simply provides those features which are usually needed most during the beginning of a song, i.e. recording the first few loops inside different groups.
//
// Have fun! :-)
//
// Usage:
// ------
//
// - Short tap:
//   - A: Toggle sending microphone to GTL
//   - D: Toggle sending guitar to GTL
// - Medium tap:
//   - A: Record next loop in group 1
//   - B: Record next loop in group 2
//   - C: Record next loop in group 3
//   - D: Record next loop in group 4
// - Long tap:
//   - A: Play group 1
//   - B: Play group 2
//   - C: Play group 3
//   - D: Play group 4
// - Tap combos:
//   - A+D: Reset session (TODO)

// Make sure to start the BlueBoard while pressing the B button!
@OnLoad
  SetShortName {3-GtlPerformer}

  Log {Set DEBUG=YES to see more runtime details}

  Call @InitSharedConstants
  Call @InitConstants
  Call @InitGtlMidiCodes
  Call @InitAumMidiCodes

  Call @Reset

  // midiForGtl = 16
  // SendMidiNoteOn  1, midiForGtl, 127, 3000
  // SendMidiNoteOff 1, midiForGtl,      3000
@End

@InitConstants
  DEBUG = NO

  NUMBER_OF_LOOPS_PER_GROUP_IN_GTL = 4
  CLOCK_LENGTH_AFTER_RESET = 1
  DEFAULT_CLOCK_LENGTH = 8
  DURATION_OF_GTL_RESET = 1000 // GTL needs a bit less than 1sec to reset; additional configs must wait for reset to finish!

  // MIDI channels
  // Be aware that in the apps all channels are displayed as +1! So GTL channel will display 2 (instead of 1).
  BB_CHANNEL  = 0 // BlueBoard
  GTL_CHANNEL = 1 // Group The Loop
  AUM_CHANNEL = 2 // AUM
  FB_CHANNEL  = 3 // Feedback (Chameleon with preset "Group The Loop Wizard")
@End

@InitGtlMidiCodes
  GTL_SELECT_MASTER_GROUP = 14 // Master group
  GTL_SELECT_GROUP[BB_BUTTON_A] = 0
  GTL_SELECT_GROUP[BB_BUTTON_B] = 1
  GTL_SELECT_GROUP[BB_BUTTON_C] = 2
  GTL_SELECT_GROUP[BB_BUTTON_D] = 3

  GTL_SELECT_LOOP[BB_BUTTON_A] = 4
  GTL_SELECT_LOOP[BB_BUTTON_B] = 5
  GTL_SELECT_LOOP[BB_BUTTON_C] = 6
  GTL_SELECT_LOOP[BB_BUTTON_D] = 7

  GTL_RECORD_OVERDUB = 8

  GTL_RESET_SESSION = 9

  GTL_PLAY_GROUP[BB_BUTTON_A] = 10
  GTL_PLAY_GROUP[BB_BUTTON_B] = 11
  GTL_PLAY_GROUP[BB_BUTTON_C] = 12
  GTL_PLAY_GROUP[BB_BUTTON_D] = 13

  GTL_INCREASE_CLOCK_LENGTH = 15
  GTL_DECREASE_CLOCK_LENGTH = 16
@End

@InitAumMidiCodes
  AUM_TOGGLE_SEND_MICROPHONE_TO_GTL = 0
  AUM_TOGGLE_SEND_GUITAR_TO_GTL = 1

  AUM_SELECT_GUITAR_PRESET[BB_BUTTON_A] = 2
  AUM_SELECT_GUITAR_PRESET[BB_BUTTON_B] = 3
  AUM_SELECT_GUITAR_PRESET[BB_BUTTON_C] = 4
@End

@InitVariables
  midiToSend = UNDEFINED
  midiDelay  = 0

  // Will both be toggled when resetting ;-)
  sendMicrophoneToGtl = NO
  sendGuitarToGtl = NO

  lastActiveLoopOfGroup[BB_BUTTON_A] = UNDEFINED // Group 1
  lastActiveLoopOfGroup[BB_BUTTON_B] = UNDEFINED // Group 2
  lastActiveLoopOfGroup[BB_BUTTON_C] = UNDEFINED // Group 3
  lastActiveLoopOfGroup[BB_BUTTON_D] = UNDEFINED // Group 4
@End

@Reset
  Log {+-------------+}
  Log {|GTL-Performer|}
  Log {+-------------+}

  Call @InitVariables
  Call @ResetGtl
  Call @SelectFirstLoopInMasterGroup
  Call @ToggleSendMicrophoneToGtl
  Call @ToggleSendGuitarToGtl
  Call @SetClockLengthToInitialValue

  lastButtonId = BB_BUTTON_A
  Call @SelectGuitarPreset
@End

@SetClockLengthToInitialValue
  Log {Set clock length }, DEFAULT_CLOCK_LENGTH

  for i = CLOCK_LENGTH_AFTER_RESET to (DEFAULT_CLOCK_LENGTH - CLOCK_LENGTH_AFTER_RESET)
    midiDelay = DURATION_OF_GTL_RESET
    Call @IncreaseClockLength
  endfor
@End

@SelectFirstLoopInMasterGroup
  Log {Select master group}
  midiToSend = GTL_SELECT_MASTER_GROUP
  midiDelay  = DURATION_OF_GTL_RESET
  Call @SendMidiNoteOnOffToGtl

  Log {Select first loop}
  midiToSend = GTL_SELECT_LOOP[BB_BUTTON_A]
  midiDelay  = DURATION_OF_GTL_RESET + 100
  Call @SendMidiNoteOnOffToGtl
@End

@ResetGtl
  Log {Reset GTL}

  midiToSend = GTL_RESET_SESSION
  Call @SendMidiNoteOnOffToGtl
@End

@IncreaseClockLength
  midiToSend = GTL_INCREASE_CLOCK_LENGTH
  Call @SendMidiNoteOnOffToGtl
@End

@DecreaseClockLength
  midiToSend = GTL_DECREASE_CLOCK_LENGTH
  Call @SendMidiNoteOnOffToGtl
@End

@ToggleSendMicrophoneToGtlOff
  Log {Not sending microphone to GTL}

  SendMidiNoteOff BB_CHANNEL, BB_BUTTONS_MIDI[BB_BUTTON_A], 127

  midiToSend = AUM_TOGGLE_SEND_MICROPHONE_TO_GTL
  Call @SendMidiNoteOffToAum
@End

@ToggleSendMicrophoneToGtlOn
  Log {Sending microphone to GTL}

  SendMidiNoteOn BB_CHANNEL, BB_BUTTONS_MIDI[BB_BUTTON_A], 127

  midiToSend = AUM_TOGGLE_SEND_MICROPHONE_TO_GTL
  Call @SendMidiNoteOnToAum
@End

@ToggleSendGuitarToGtlOff
  Log {Not sending guitar to GTL}

  SendMidiNoteOff BB_CHANNEL, BB_BUTTONS_MIDI[BB_BUTTON_D], 127

  midiToSend = AUM_TOGGLE_SEND_GUITAR_TO_GTL
  Call @SendMidiNoteOffToAum
@End

@ToggleSendGuitarToGtlOn
  Log {Sending guitar to GTL}

  SendMidiNoteOn BB_CHANNEL, BB_BUTTONS_MIDI[BB_BUTTON_D], 127

  midiToSend = AUM_TOGGLE_SEND_GUITAR_TO_GTL
  Call @SendMidiNoteOnToAum
@End

@SendMidiNoteOnOffToGtl
  SendMidiNoteOn  GTL_CHANNEL, midiToSend, 127, midiDelay
  SendMidiNoteOff GTL_CHANNEL, midiToSend,   0, midiDelay

  midiDelay = 0

  if DEBUG
    Log {Sending MIDI on/off to GTL with midiToSend=}, midiToSend, { and midiDelay=}, midiDelay
  endif
@End

@SendMidiNoteOnOffToAum
  Call @SendMidiNoteOnToAum
  Call @SendMidiNoteOffToAum
@End

@SendMidiNoteOnToAum
  SendMidiNoteOn AUM_CHANNEL, midiToSend, 127
@End

@SendMidiNoteOffToAum
  SendMidiNoteOff AUM_CHANNEL, midiToSend, 0, 0
@End

@OnSysex
  ReceiveSysex data
  sysexAction = data[0]
  lastButtonId = data[1]

  if sysexAction = SYSEX_TOGGLE_SEND_MICROPHONE_TO_GTL
    Call @ToggleSendMicrophoneToGtl
  elseif sysexAction = SYSEX_TOGGLE_SEND_GUITAR_TO_GTL
    Call @ToggleSendGuitarToGtl
  elseif sysexAction = SYSEX_RECORD_NEXT_LOOP_IN_GROUP
    Call @RecordNextLoopInGroup
  elseif sysexAction = SYSEX_TOGGLE_AND_SELECT_GROUP
    Call @ToggleAndSelectGroup
  elseif sysexAction = SYSEX_RESET
    Call @Reset
  elseif sysexAction = SYSEX_DECREASE_CLOCK_LENGTH
    Call @DecreaseClockLength
  elseif sysexAction = SYSEX_INCREASE_CLOCK_LENGTH
    Call @IncreaseClockLength
  elseif sysexAction = SYSEX_SELECT_GUITAR_PRESET
    Call @SelectGuitarPreset
  endif
@End

@SelectGuitarPreset
  Log {Activating guitar preset #}, lastButtonId

  midiToSend = AUM_SELECT_GUITAR_PRESET[lastButtonId]
  Call @SendMidiNoteOnOffToAum
@End

@ToggleSendMicrophoneToGtl
  if sendMicrophoneToGtl
    Call @ToggleSendMicrophoneToGtlOff
    sendMicrophoneToGtl = NO
  else
    Call @ToggleSendMicrophoneToGtlOn
    sendMicrophoneToGtl = YES
  endif
@End

@ToggleSendGuitarToGtl
  if sendGuitarToGtl
    Call @ToggleSendGuitarToGtlOff
    sendGuitarToGtl = NO
  else
    Call @ToggleSendGuitarToGtlOn
    sendGuitarToGtl = YES
  endif
@End

@ToggleAndSelectGroup
  Log {Toggling and selecting group}

  midiToSend = GTL_PLAY_GROUP[lastButtonId]
  Call @SendMidiNoteOnOffToGtl

  Call @SelectGroup
@End

@RecordNextLoopInGroup
  Log {Recording next loop in group}

  Call @SelectGroup

  if lastActiveLoopOfGroup[lastButtonId] = UNDEFINED
    lastActiveLoopOfGroup[lastButtonId] = 1
  endif

  midiToSend = GTL_SELECT_LOOP[lastActiveLoopOfGroup[lastButtonId]]
  Call @SendMidiNoteOnOffToGtl

  midiToSend = GTL_RECORD_OVERDUB
  Call @SendMidiNoteOnOffToGtl

  if lastActiveLoopOfGroup[lastButtonId] < NUMBER_OF_LOOPS_PER_GROUP_IN_GTL
    Inc lastActiveLoopOfGroup[lastButtonId]
  endif
@End

@SelectGroup
  midiToSend = GTL_SELECT_GROUP[lastButtonId]
  Call @SendMidiNoteOnOffToGtl
@End




//////////////////////////////////////////////////////////
// These constants are shared across all Mozaic scripts //
//////////////////////////////////////////////////////////

@InitSharedConstants
  UNDEFINED = -1

  BB_BUTTON_A = 1
  BB_BUTTON_B = 2
  BB_BUTTON_C = 3
  BB_BUTTON_D = 4

  BB_BUTTONS_MIDI[BB_BUTTON_A] = 60
  BB_BUTTONS_MIDI[BB_BUTTON_B] = 62
  BB_BUTTONS_MIDI[BB_BUTTON_C] = 64
  BB_BUTTONS_MIDI[BB_BUTTON_D] = 65

  TAP_SHORT  = 0    // Up to 499ms
  TAP_MEDIUM = 500  // Between 500 and 999ms
  TAP_LONG   = 1000 // 1000ms or more

  SYSEX_TOGGLE_SEND_MICROPHONE_TO_GTL = 0
  SYSEX_TOGGLE_SEND_GUITAR_TO_GTL = 1
  SYSEX_RECORD_NEXT_LOOP_IN_GROUP = 2
  SYSEX_TOGGLE_AND_SELECT_GROUP = 3
  SYSEX_RESET = 4
  SYSEX_DECREASE_CLOCK_LENGTH = 5
  SYSEX_INCREASE_CLOCK_LENGTH = 6
  SYSEX_SELECT_GUITAR_PRESET = 7
@End
