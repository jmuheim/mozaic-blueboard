// Group the Loop Performer (GTL-Performer)
// ========================================
//
// Installation:
// -------------
//
// - In AUM, in the "Mozaic" MIDI channel, click the "+1" button (scroll down if needed)
// - Click the newly inserted "+" button, then "Audio Unit MIDI Processor" -> "Mozaic"
// - Click the newly inserted Mozaic button
// - Click "Code"
// - Replace the default code with the one in this file
// - Click "Upload"
// - Click the "MIDI Route" button (the "backwards S" in the window's menu bar)
// - Click "Mozaic @M2:1" (BlueBoard-Handler)
// - Close the window by pressing the "X" button
// - Click the global "MIDI Route" button (the "backwards S" at the top right, or by accessing it through the main menu)
// - Route BlueBoard-Handler's (Mozaic @M1:2) output to "iRig BlueBoard Bluetooth"
// - Press "Close"
//
// About:
// ------
//
// GTL-Performer assists you in setting up a song inside GTL by providing shortcuts and conventions which will make sense for most songs.
//
// During the start of a song, usually you are very busy with singing and playing your instrument. As such, you don't have any hands free to interact with GTL's GUI. But still, possibly right after recording the current loop, you want the next loop to be armed (in the current or any other group), probably switch settings of your instrument (or switch to another instrument), and so on. For this, GTL-Performer provides the most needed features at the tip of your toes, so you can control them even while having no hands free.
//
// Usually, after a song was successfully built up and has some recorded loops and groups, you will be able to keep your hands off your instrument(s) from time to time. This will then allow you to interact with GTL's GUI directly and do more sophisticated stuff manually. So GTL-Performer is not meant to assist you fully throughout a whole song. It simply provides those features which are usually needed most during the beginning of a song, like recording the first few loops inside different groups.
//
// Have fun! :-)
//
// Usage:
// ------
//
// - Short tap:
//   - A: Toggle sending microphone to GTL
//     - If a microphone preset was prepared (see below), the preset will be activated, and guitar will be sent to GTL anyway
//   - C: Toggle sending keyboard to GTL
//     - Same like above, but with keyboard presets
//     - Disables guitar (either guitar or keyboard can be active, as guitar is also MIDI keyboard)
//   - D: Toggle sending guitar to GTL
//     - Same like above, but with guitar presets
//     - Disables keyboard (either guitar or keyboard can be active, as guitar is also MIDI keyboard)
// - Medium tap:
//   - A|B|C|D: Record next loop in group 1|2|3|4
// - Long tap:
//   - A|B|C|D: Go to and play group 1|2|3|4
// - Tap combos:
//   - A>(B|C|D): Prepare next microphone preset TODO: Better A>(B|C|D)? Would allow to quickly toggle more presets, e.g. A+B>C could activate delay (B) before selecting preset (C)
//     - It will be activated when pressing A again
//   - C>(A|B|D): Prepare next keyboard preset
//     - It will be activated when pressing C again
//   - D>(A|B|C): Prepare next guitar preset
//     - It will be activated when pressing D again
//   - B+C: Decrease clock length
//   - B+D: Decrease clock length
//   - B>C: Reset session

// Make sure to start the BlueBoard while pressing the B button!
@OnLoad
  SetShortName {2-GtlPerformer}

  DEBUG = NO
  if DEBUG = NO
    Log {Set DEBUG=YES to see runtime details}
  endif

  Call @InitSharedConstants
  Call @InitConstants
  Call @InitGtlMidiCodes
  Call @InitAumMidiCodes

  Call @Reset

  // midiForGtl = 16
  // SendMidiNoteOn  1, midiForGtl, 127, 3000
  // SendMidiNoteOff 1, midiForGtl,      3000
@End

@InitConstants
  NUMBER_OF_LOOPS_PER_GROUP_IN_GTL = 4
  CLOCK_LENGTH_AFTER_RESET = 1
  DEFAULT_CLOCK_LENGTH = 8
  DURATION_OF_GTL_RESET = 1000 // GTL needs a bit less than 1sec to reset; additional configs must wait for reset to finish!
@End

@InitGtlMidiCodes
  GTL_SELECT_GROUP[BB_BUTTON_MASTER] = 14
  GTL_SELECT_GROUP[BB_BUTTON_A] = 0
  GTL_SELECT_GROUP[BB_BUTTON_B] = 1
  GTL_SELECT_GROUP[BB_BUTTON_C] = 2
  GTL_SELECT_GROUP[BB_BUTTON_D] = 3

  GTL_SELECT_LOOP[BB_BUTTON_A] = 4
  GTL_SELECT_LOOP[BB_BUTTON_B] = 5
  GTL_SELECT_LOOP[BB_BUTTON_C] = 6
  GTL_SELECT_LOOP[BB_BUTTON_D] = 7

  GTL_RECORD_OVERDUB = 8

  GTL_RESET_SESSION = 9

  GTL_PLAY_GROUP[BB_BUTTON_A] = 10
  GTL_PLAY_GROUP[BB_BUTTON_B] = 11
  GTL_PLAY_GROUP[BB_BUTTON_C] = 12
  GTL_PLAY_GROUP[BB_BUTTON_D] = 13

  GTL_INCREASE_CLOCK_LENGTH = 15
  GTL_DECREASE_CLOCK_LENGTH = 16
@End

@InitAumMidiCodes
  AUM_SEND_MICROPHONE_TO_GTL = 0
  AUM_SEND_KEYBOARD_TO_GTL = 11
  AUM_SEND_GUITAR_TO_GTL = 1

  AUM_ENABLE_KEYBOARD = 12
  AUM_ENABLE_GUITAR = 13

  // Microphone button: A
  // Don't do anything yet in AUM... could activate/deactivate echo, delay, vocoder...
  AUM_SELECT_MICROPHONE_PRESET[BB_BUTTON_B] = 5
  AUM_SELECT_MICROPHONE_PRESET[BB_BUTTON_C] = 6
  AUM_SELECT_MICROPHONE_PRESET[BB_BUTTON_D] = 7

  // Keyboard button: C
  AUM_SELECT_KEYBOARD_PRESET[BB_BUTTON_A] = 8
  AUM_SELECT_KEYBOARD_PRESET[BB_BUTTON_B] = 9
  AUM_SELECT_KEYBOARD_PRESET[BB_BUTTON_D] = 10

  // Guitar button: D
  AUM_SELECT_GUITAR_PRESET[BB_BUTTON_A] = 2
  AUM_SELECT_GUITAR_PRESET[BB_BUTTON_B] = 3
  AUM_SELECT_GUITAR_PRESET[BB_BUTTON_C] = 4
@End

@InitVariables
  midiToSend = UNDEFINED
  midiDelay  = 0
@End

@Reset
  Log {+-------------+}
  Log {|GTL-Performer|}
  Log {+-------------+}

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_WELCOME]
  SendSysex sysexData, 2

  Call @MuteFeedback

  Call @InitVariables

  Call @ResetLastActiveLoopsOfGroups
  Call @ResetGtl
  Call @SetClockLengthToInitialValue

  midiDelay = DURATION_OF_GTL_RESET
  lastButtonId = BB_BUTTON_MASTER
  Call @SelectGroup

  nextMicrophonePreset = BB_BUTTON_D
  Call @ActivateMicrophonePreset
  Call @EnableSendMicrophoneToGtl

  nextKeyboardPreset = BB_BUTTON_A
  Call @ActivateKeyboardPreset
  Call @DisableSendKeyboardToGtl

  nextGuitarPreset = BB_BUTTON_A
  Call @ActivateGuitarPreset
  Call @EnableSendGuitarToGtl

  Call @UnmuteFeedback
@End

@MuteFeedback
  sysexData = [SYSEX_MUTE_FEEDBACK]
  SendSysex sysexData, 1
@End

@UnmuteFeedback
  sysexData = [SYSEX_UNMUTE_FEEDBACK]
  SendSysex sysexData, 1
@End

@ResetLastActiveLoopsOfGroups
  lastActiveLoopOfGroup[BB_BUTTON_MASTER] = UNDEFINED // Master group
  lastActiveLoopOfGroup[BB_BUTTON_A] = UNDEFINED // Group 1
  lastActiveLoopOfGroup[BB_BUTTON_B] = UNDEFINED // Group 2
  lastActiveLoopOfGroup[BB_BUTTON_C] = UNDEFINED // Group 3
  lastActiveLoopOfGroup[BB_BUTTON_D] = UNDEFINED // Group 4
@End

@SetClockLengthToInitialValue
  Log {Set clock length }, DEFAULT_CLOCK_LENGTH

  for i = CLOCK_LENGTH_AFTER_RESET to (DEFAULT_CLOCK_LENGTH - CLOCK_LENGTH_AFTER_RESET)
    midiDelay = DURATION_OF_GTL_RESET
    Call @IncreaseClockLength
  endfor

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_CLOCK_LENGTH, DEFAULT_CLOCK_LENGTH]
  SendSysex sysexData, 3
@End

@SelectNextLoop
  if lastActiveLoopOfGroup[lastButtonId] = UNDEFINED
    lastActiveLoopOfGroup[lastButtonId] = 1
  endif

  midiToSend = GTL_SELECT_LOOP[lastActiveLoopOfGroup[lastButtonId]]
  Call @SendMidiNoteOnOffToGtl

  Log {Selected loop }, lastActiveLoopOfGroup[lastButtonId], { in group }, lastActiveLoopOfGroup

  if lastActiveLoopOfGroup[lastButtonId] < NUMBER_OF_LOOPS_PER_GROUP_IN_GTL
    Inc lastActiveLoopOfGroup[lastButtonId]
  endif
@End

@ResetGtl
  Log {Reset GTL}

  midiToSend = GTL_RESET_SESSION
  Call @SendMidiNoteOnOffToGtl
@End

@IncreaseClockLength
  midiToSend = GTL_INCREASE_CLOCK_LENGTH
  Call @ManipulateClockLength
@End

@DecreaseClockLength
  midiToSend = GTL_DECREASE_CLOCK_LENGTH
  Call @ManipulateClockLength
@End

@ManipulateClockLength
  Call @SendMidiNoteOnOffToGtl

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_CLOCK_LENGTH]
  SendSysex sysexData, 2
@End

@DisableSendMicrophoneToGtl
  Log {Not sending microphone to GTL}

  SendMidiNoteOff BB_MIDI_CHANNEL, BB_BUTTONS_MIDI[BB_BUTTON_A], 127

  midiToSend = AUM_SEND_MICROPHONE_TO_GTL
  Call @SendMidiNoteOffToAum

  sendingMicrophoneToGtl = NO

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_SENDING, FEEDBACK_MICROPHONE, FEEDBACK_DEACTIVATED]
  SendSysex sysexData, 4
@End

@EnableSendMicrophoneToGtl
  Log {Sending microphone to GTL}

  SendMidiNoteOn BB_MIDI_CHANNEL, BB_BUTTONS_MIDI[BB_BUTTON_A], 127

  midiToSend = AUM_SEND_MICROPHONE_TO_GTL
  Call @SendMidiNoteOnToAum

  sendingMicrophoneToGtl = YES

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_SENDING, FEEDBACK_MICROPHONE, FEEDBACK_ACTIVATED]
  SendSysex sysexData, 4
@End

@EnableSendKeyboardToGtl
  Log {Sending keyboard to GTL}

  SendMidiNoteOn BB_MIDI_CHANNEL, BB_BUTTONS_MIDI[BB_BUTTON_C], 127

  midiToSend = AUM_SEND_KEYBOARD_TO_GTL
  Call @SendMidiNoteOnToAum

  Call @EnableKeyboard
  sendingKeyboardToGtl = YES

  if sendingGuitarToGtl
    Call @DisableSendGuitarToGtl
  endif

  Call @DisableGuitar

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_SENDING, FEEDBACK_KEYBOARD, FEEDBACK_ACTIVATED]
  SendSysex sysexData, 4
@End

@EnableSendGuitarToGtl
  Log {Sending guitar to GTL}

  SendMidiNoteOn BB_MIDI_CHANNEL, BB_BUTTONS_MIDI[BB_BUTTON_D], 127

  midiToSend = AUM_SEND_GUITAR_TO_GTL
  Call @SendMidiNoteOnToAum

  Call @EnableGuitar
  sendingGuitarToGtl = YES

  if sendingKeyboardToGtl
    Call @DisableSendKeyboardToGtl
  endif

  Call @DisableKeyboard

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_SENDING, FEEDBACK_GUITAR, FEEDBACK_ACTIVATED]
  SendSysex sysexData, 4
@End

@DisableSendKeyboardToGtl
  Log {Not sending keyboard to GTL}

  SendMidiNoteOff BB_MIDI_CHANNEL, BB_BUTTONS_MIDI[BB_BUTTON_C], 127

  midiToSend = AUM_SEND_KEYBOARD_TO_GTL
  Call @SendMidiNoteOffToAum
  sendingKeyboardToGtl = NO

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_SENDING, FEEDBACK_KEYBOARD, FEEDBACK_DEACTIVATED]
  SendSysex sysexData, 4
@End

@DisableSendGuitarToGtl
  Log {Not sending guitar to GTL}

  SendMidiNoteOff BB_MIDI_CHANNEL, BB_BUTTONS_MIDI[BB_BUTTON_D], 127

  midiToSend = AUM_SEND_GUITAR_TO_GTL
  Call @SendMidiNoteOffToAum
  sendingGuitarToGtl = NO

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_SENDING, FEEDBACK_GUITAR, FEEDBACK_DEACTIVATED]
  SendSysex sysexData, 4
@End

@EnableKeyboard
  midiToSend = AUM_ENABLE_KEYBOARD
  Call @SendMidiNoteOnToAum
@End

@DisableKeyboard
  midiToSend = AUM_ENABLE_KEYBOARD
  Call @SendMidiNoteOffToAum
@End

@EnableGuitar
  midiToSend = AUM_ENABLE_GUITAR
  Call @SendMidiNoteOnToAum
@End

@DisableGuitar
  midiToSend = AUM_ENABLE_GUITAR
  Call @SendMidiNoteOffToAum
@End

@SendMidiNoteOnOffToGtl
  SendMidiNoteOn  GTL_MIDI_CHANNEL, midiToSend, 127, midiDelay
  SendMidiNoteOff GTL_MIDI_CHANNEL, midiToSend,   0, midiDelay

  midiDelay = 0

  if DEBUG
    Log {Sending MIDI on/off to GTL with midiToSend=}, midiToSend, { and midiDelay=}, midiDelay
  endif
@End

@SendMidiNoteOnOffToAum
  Call @SendMidiNoteOnToAum
  Call @SendMidiNoteOffToAum
@End

@SendMidiNoteOnToAum
  SendMidiNoteOn AUM_MIDI_CHANNEL, midiToSend, 127
@End

@SendMidiNoteOffToAum
  SendMidiNoteOff AUM_MIDI_CHANNEL, midiToSend, 0, 0
@End

@OnSysex
  ReceiveSysex sysexData
  sysexAction = sysexData[0]
  lastButtonId = sysexData[1]

  if sysexAction = SYSEX_TOGGLE_SEND_MICROPHONE_TO_GTL
    Call @ToggleSendMicrophoneToGtl
  elseif sysexAction = SYSEX_TOGGLE_SEND_KEYBOARD_TO_GTL
    Call @ToggleSendKeyboardToGtl
  elseif sysexAction = SYSEX_TOGGLE_SEND_GUITAR_TO_GTL
    Call @ToggleSendGuitarToGtl
  elseif sysexAction = SYSEX_RECORD_NEXT_LOOP_IN_GROUP
    Call @RecordNextLoopInGroup
  elseif sysexAction = SYSEX_TOGGLE_AND_SELECT_GROUP
    Call @ToggleAndSelectGroup
  elseif sysexAction = SYSEX_RESET
    Call @Reset
  elseif sysexAction = SYSEX_DECREASE_CLOCK_LENGTH
    Call @DecreaseClockLength
  elseif sysexAction = SYSEX_INCREASE_CLOCK_LENGTH
    Call @IncreaseClockLength
  elseif sysexAction = SYSEX_SELECT_MICROPHONE_PRESET
    Call @SelectMicrophonePreset
  elseif sysexAction = SYSEX_SELECT_KEYBOARD_PRESET
    Call @SelectKeyboardPreset
  elseif sysexAction = SYSEX_SELECT_GUITAR_PRESET
    Call @SelectGuitarPreset
  endif
@End

@SelectMicrophonePreset
  nextMicrophonePreset = lastButtonId

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_MICROPHONE, nextMicrophonePreset, FEEDBACK_ARMED]
  SendSysex sysexData, 4

  Log {Preparing microphone preset stored on button }, nextMicrophonePreset, {, press button }, BB_BUTTON_A, { to activate!}
@End

@SelectKeyboardPreset
  nextKeyboardPreset = lastButtonId

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_KEYBOARD, nextKeyboardPreset, FEEDBACK_ARMED]
  SendSysex sysexData, 4

  Log {Preparing keyboard preset stored on button }, nextKeyboardPreset, {, press button }, BB_BUTTON_C, { to activate!}
@End

@SelectGuitarPreset
  nextGuitarPreset = lastButtonId

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_GUITAR, nextGuitarPreset, FEEDBACK_ARMED]
  SendSysex sysexData, 4

  Log {Preparing guitar preset stored on button }, nextGuitarPreset, {, press button }, BB_BUTTON_D, { to activate!}
@End

@ToggleSendMicrophoneToGtl
  if nextMicrophonePreset <> UNDEFINED
    Call @ActivateMicrophonePreset

    if sendingMicrophoneToGtl = NO
      Call @EnableSendMicrophoneToGtl
    endif
  elseif sendingMicrophoneToGtl
    Call @DisableSendMicrophoneToGtl
  else
    Call @EnableSendMicrophoneToGtl
  endif
@End

@ToggleSendKeyboardToGtl
  if nextKeyboardPreset <> UNDEFINED
    Call @ActivateKeyboardPreset

    if sendingKeyboardToGtl = NO
      Call @EnableSendKeyboardToGtl
    endif
  elseif sendingKeyboardToGtl
    Call @DisableSendKeyboardToGtl
  else
    Call @EnableSendKeyboardToGtl
  endif
@End

@ToggleSendGuitarToGtl
  if nextGuitarPreset <> UNDEFINED
    Call @ActivateGuitarPreset

    if sendingGuitarToGtl = NO
      Call @EnableSendGuitarToGtl
    endif
  elseif sendingGuitarToGtl
    Call @DisableSendGuitarToGtl
  else
    Call @EnableSendGuitarToGtl
  endif
@End

@ActivateMicrophonePreset
  midiToSend = AUM_SELECT_MICROPHONE_PRESET[nextMicrophonePreset]
  Call @SendMidiNoteOnOffToAum
  Log {Activated microphone preset stored on button }, nextMicrophonePreset, { (AUM MIDI=}, midiToSend, {)}

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_MICROPHONE, nextMicrophonePreset, FEEDBACK_ACTIVATED]
  SendSysex sysexData, 4

  nextMicrophonePreset = UNDEFINED
@End

@ActivateKeyboardPreset
  midiToSend = AUM_SELECT_KEYBOARD_PRESET[nextKeyboardPreset]
  
  Call @SendMidiNoteOnOffToAum
  Log {Activated keyboard preset stored on button }, nextKeyboardPreset, { (AUM MIDI=}, midiToSend, {)}

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_KEYBOARD, nextKeyboardPreset, FEEDBACK_ACTIVATED]
  SendSysex sysexData, 4

  nextKeyboardPreset = UNDEFINED
@End

@ActivateGuitarPreset
  midiToSend = AUM_SELECT_GUITAR_PRESET[nextGuitarPreset]
  
  Call @SendMidiNoteOnOffToAum
  Log {Activated guitar preset stored on button }, nextGuitarPreset, { (AUM MIDI=}, midiToSend, {)}

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_GUITAR, nextGuitarPreset, FEEDBACK_ACTIVATED]
  SendSysex sysexData, 4

  nextGuitarPreset = UNDEFINED
@End

@ToggleAndSelectGroup
  Log {Toggling and selecting group}

  midiToSend = GTL_PLAY_GROUP[lastButtonId]
  Call @SendMidiNoteOnOffToGtl

  Call @SelectGroup
@End

@RecordNextLoopInGroup
  Log {Recording next loop in group}

  // Add some delay when selecting loop in master group, as chances are high that in the same moment also one of the other groups was toggled and selected, and too many similar signals in the same fraction of time seem to confuse GTL (and it's good for the artist to see what's exactly happening, one thing after the other)
  if lastButtonId = BB_BUTTON_MASTER
    midiDelay = 1000
  endif
  Call @SelectGroup

  if lastButtonId = BB_BUTTON_MASTER
    midiDelay = 1500
  endif
  Call @SelectNextLoop

  if lastButtonId = BB_BUTTON_MASTER
    midiDelay = 2000
  endif
  Call @RecordOverdub

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_LOOP, lastActiveLoopOfGroup[lastButtonId], FEEDBACK_ARMED]
  SendSysex sysexData, 4
@End

@RecordOverdub
  midiToSend = GTL_RECORD_OVERDUB
  Call @SendMidiNoteOnOffToGtl
@End

@SelectGroup
  midiToSend = GTL_SELECT_GROUP[lastButtonId]
  Call @SendMidiNoteOnOffToGtl

  sysexData = [SYSEX_ANNOUNCE_FEEDBACK, FEEDBACK_GROUP, lastButtonId]
  SendSysex sysexData, 3

  Log {Selected group }, lastButtonId
@End





//////////////////////////////////////////////////////////
// These constants are shared across all Mozaic scripts //
//////////////////////////////////////////////////////////

@InitSharedConstants
  UNDEFINED = -1

  BB_BUTTON_MASTER = 0
  BB_BUTTON_A = 1
  BB_BUTTON_B = 2
  BB_BUTTON_C = 3
  BB_BUTTON_D = 4

  BB_BUTTONS_MIDI[BB_BUTTON_A] = 60
  BB_BUTTONS_MIDI[BB_BUTTON_B] = 62
  BB_BUTTONS_MIDI[BB_BUTTON_C] = 64
  BB_BUTTONS_MIDI[BB_BUTTON_D] = 65

  TAP_SHORT  = 0    // Up to 299ms
  TAP_MEDIUM = 300  // Between 300 and 999ms
  TAP_LONG   = 1000 // 1000ms or more

  SYSEX_TOGGLE_SEND_MICROPHONE_TO_GTL = 0
  SYSEX_TOGGLE_SEND_GUITAR_TO_GTL = 1
  SYSEX_RECORD_NEXT_LOOP_IN_GROUP = 2
  SYSEX_TOGGLE_AND_SELECT_GROUP = 3
  SYSEX_RESET = 4
  SYSEX_DECREASE_CLOCK_LENGTH = 5
  SYSEX_INCREASE_CLOCK_LENGTH = 6
  SYSEX_SELECT_GUITAR_PRESET = 7
  SYSEX_SELECT_MICROPHONE_PRESET = 8
  SYSEX_ANNOUNCE_FEEDBACK = 9
  SYSEX_MUTE_FEEDBACK = 10
  SYSEX_UNMUTE_FEEDBACK = 11
  SYSEX_TOGGLE_SEND_KEYBOARD_TO_GTL = 12
  SYSEX_SELECT_KEYBOARD_PRESET = 13

  // Be aware that in the apps all channels are displayed as +1! So AUM and GTL channel will display 2 (instead of 1).
  BB_MIDI_CHANNEL  = 0 // BlueBoard
  GTL_MIDI_CHANNEL = 1 // Group The Loop
  AUM_MIDI_CHANNEL = 2 // AUM

  FEEDBACK_WELCOME = 10
  FEEDBACK_GROUP = 11
  FEEDBACK_LOOP = 12
  FEEDBACK_CLOCK_LENGTH = 13
  FEEDBACK_GUITAR = 14
  FEEDBACK_MICROPHONE = 15
  FEEDBACK_SENDING = 16
  FEEDBACK_ACTIVATED = 17
  FEEDBACK_DEACTIVATED = 18
  FEEDBACK_ARMED = 19
  FEEDBACK_KEYBOARD = 21
@End
