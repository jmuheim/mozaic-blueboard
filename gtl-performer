// Group the Loop Performer
// ========================
//
// GTL-Performer assists you in setting up a song inside GTL by providing shortcuts and conventions which will make sense for most songs.
//
// During the start of a song, usually you are very busy with singing and playing your instrument. As such, you don't have any hands free to interact with GTL's GUI. But still, you want to arm the next loop (in the current or any other group), probably switch settings of you instrument(s), etc., and do this subsequently to the current recording. For this, GTL-Performer provides the most needed features at the tip of your toes, so you can control them even while having no hands free.
//
// Usually, after a song is successfully started and has some recorded loops and groups, you will be able to keep your hands off your instrument(s) from time to time and interact with GTL's GUI directly (which allows you to do more sophisticated stuff manually). So GTL-Performer is not meant to assist you fully throughout a song. It simply provides those features which are usually needed most during the start of a song, i.e. recording the first few loops inside different groups.
//
// Usage
// -----
//
// - Short tap:
//   - A: Toggle sending microphone to GTL
//   - D: Toggle sending instrument to GTL
// - Medium tap:
//   - A: Record next loop in group 1
//   - B: Record next loop in group 2
//   - C: Record next loop in group 3
//   - D: Record next loop in group 4
// - Long tap:
//   - A: Play group 1
//   - B: Play group 2
//   - C: Play group 3
//   - D: Play group 4
// - Tap combos:
//   - A+D: Reset session (TODO)

// Make sure to start the BlueBoard while pressing the B button!
@OnLoad
  SetShortName {GtlPerformer}

  Call @InitConstants
  Call @InitGtlMidiCodes
  Call @InitAumMidiCodes

  Call @Reset
@End

@InitConstants
  UNDEFINED = -1

  // Do not use the notes 60, 62, 64, and 65 for anything else (like MIDI bindings), as they are used for illuminating the BlueBoard buttons!
  BB_BUTTON_A = 60
  BB_BUTTON_B = 62
  BB_BUTTON_C = 64
  BB_BUTTON_D = 65

  BB_MICROPHONE_BUTTON = BB_BUTTON_A
  BB_GUITAR_BUTTON     = BB_BUTTON_D

  TAP_SHORT  = 0    // Up to 499ms
  TAP_MEDIUM = 500  // Between 500 and 999ms
  TAP_LONG   = 1000 // 1000ms or more

  NUMBER_OF_LOOPS_PER_GROUP_IN_GTL = 4

  // MIDI channels => Be aware that in the apps all channels are displayed as +1! So GTL channel will display 2 (instead of 1).
  BB_CHANNEL  = 0 // BlueBoard
  GTL_CHANNEL = 1 // Group The Loop
  AUM_CHANNEL = 2 // AUM
  FB_CHANNEL  = 3 // Feedback (Chameleon with preset "Group The Loop Wizard") => Make sure that AUM only sends this channel (3) to the respective Chameleon instance! Note: Chameleon only supports 34 audio files per preset (see https://forum.audiob.us/discussion/comment/835351/#Comment_835351).
@End

@InitGtlMidiCodes
  GTL_SELECT_MASTER_GROUP = 14
  GTL_SELECT_GROUP[BB_BUTTON_A] = 0
  GTL_SELECT_GROUP[BB_BUTTON_B] = 1
  GTL_SELECT_GROUP[BB_BUTTON_C] = 2
  GTL_SELECT_GROUP[BB_BUTTON_D] = 3

  GTL_SELECT_LOOP[1] = 4
  GTL_SELECT_LOOP[2] = 5
  GTL_SELECT_LOOP[3] = 6
  GTL_SELECT_LOOP[4] = 7

  GTL_RECORD_OVERDUB = 8

  GTL_RESET_SESSION = 9

  GTL_PLAY_GROUP[BB_BUTTON_A] = 10
  GTL_PLAY_GROUP[BB_BUTTON_B] = 11
  GTL_PLAY_GROUP[BB_BUTTON_C] = 12
  GTL_PLAY_GROUP[BB_BUTTON_D] = 13
@End

@InitAumMidiCodes
  AUM_TOGGLE_MICROPHONE = 0
  AUM_TOGGLE_GUITAR     = 1
@End

@InitVariables
  modifierButton = UNDEFINED
  modifierButtonWasUsed = NO

  midiToSend = UNDEFINED
  midiDelay  = 0

  sendMicrophoneToGtl = NO
  sendInstrumentToGtl = NO

  lastActiveLoopOfGroup[BB_BUTTON_A] = UNDEFINED // Group 1
  lastActiveLoopOfGroup[BB_BUTTON_B] = UNDEFINED // Group 2
  lastActiveLoopOfGroup[BB_BUTTON_C] = UNDEFINED // Group 3
  lastActiveLoopOfGroup[BB_BUTTON_D] = UNDEFINED // Group 4
@End

@Reset
  Call @InitVariables

  Call @ResetGtl

  midiToSend = GTL_SELECT_MASTER_GROUP
  Call @SelectGroup

  midiToSend = GTL_SELECT_LOOP[1]
  midiDelay  = 1000
  Call @SendMidiNoteOnOffToGtl

  Call @ToggleSendMicrophoneToGtlOff
  Call @ToggleSendInstrumentToGtlOff
@End

@ResetGtl
  midiToSend = GTL_RESET_SESSION
  Call @SendMidiNoteOnOffToGtl
@End

@ToggleSendMicrophoneToGtlOff
  SendMidiNoteOff BB_CHANNEL, BB_MICROPHONE_BUTTON, 127

  midiToSend = AUM_TOGGLE_MICROPHONE
  Call @SendMidiNoteOffToAum
@End

@ToggleSendMicrophoneToGtlOn
  SendMidiNoteOn BB_CHANNEL, BB_MICROPHONE_BUTTON, 127

  midiToSend = AUM_TOGGLE_MICROPHONE
  Call @SendMidiNoteOnToAum
@End

@ToggleSendInstrumentToGtlOff
  SendMidiNoteOff BB_CHANNEL, BB_GUITAR_BUTTON, 127

  midiToSend = AUM_TOGGLE_GUITAR
  Call @SendMidiNoteOffToAum
@End

@ToggleSendInstrumentToGtlOn
  SendMidiNoteOn BB_CHANNEL, BB_GUITAR_BUTTON, 127

  midiToSend = AUM_TOGGLE_GUITAR
  Call @SendMidiNoteOnToAum
@End

@SendMidiNoteOnOffToGtl
  SendMidiNoteOn  GTL_CHANNEL, midiToSend, 127, midiDelay
  SendMidiNoteOff GTL_CHANNEL, midiToSend,   0, midiDelay

  midiDelay = 0

  Log {Sent Midi on/off to GTL: }, midiToSend
@End

@SendMidiNoteOnOffToAum
  Call @SendMidiNoteOnToAum
  Call @SendMidiNoteOffToAum
@End

@SendMidiNoteOnToAum
  SendMidiNoteOn AUM_CHANNEL, midiToSend, 127
@End

@SendMidiNoteOffToAum
  SendMidiNoteOff AUM_CHANNEL, midiToSend, 0, 0
@End

@OnMidiNoteOn
  buttonDownTime = SystemTime // Time at which button was pressed down

  // Allows, while holding a button, to press another button (or a series of buttons), e.g. A+D, B+C, etc.
  if modifierButton = UNDEFINED
    modifierButton = MidiNote
  endif
@End

@OnMidiNoteOff
  buttonUpTime = SystemTime
  modifierButtonDuration = buttonUpTime - buttonDownTime

  if modifierButton = MidiNote
    modifierButton = UNDEFINED

    if modifierButtonWasUsed = NO
      if modifierButtonDuration < TAP_MEDIUM
        tapType = TAP_SHORT
      elseif modifierButtonDuration < TAP_LONG
        tapType = TAP_MEDIUM
      else
        tapType = TAP_LONG
      endif

      Call @DispatchSingleButtonPress
    else
      modifierButtonWasUsed = NO
    endif
  else
    modifierButtonWasUsed = YES
    // TODO: B+C => Reset session
  endif
@End

@DispatchSingleButtonPress
  if tapType = TAP_SHORT
    Call @ToggleGtlInputs
  elseif tapType = TAP_MEDIUM
    Call @RecordNextLoopInGroup
  elseif tapType = TAP_LONG
    Call @ToggleAndSelectGroup
  endif
@End

@ToggleAndSelectGroup
  midiToSend = GTL_PLAY_GROUP[MidiNote]
  Call @SendMidiNoteOnOffToGtl

  Call @SelectGroup
@End

@ToggleGtlInputs
  if MidiNote = BB_MICROPHONE_BUTTON
    if sendMicrophoneToGtl
      Call @ToggleSendMicrophoneToGtlOff
      sendMicrophoneToGtl = NO
    else
      Call @ToggleSendMicrophoneToGtlOn
      sendMicrophoneToGtl = YES
    endif
  elseif MidiNote = BB_GUITAR_BUTTON
    if sendInstrumentToGtl
      Call @ToggleSendInstrumentToGtlOff
      sendInstrumentToGtl = NO
    else
      Call @ToggleSendInstrumentToGtlOn
      sendInstrumentToGtl = YES
    endif
  endif
@End

@RecordNextLoopInGroup
  Call @SelectGroup

  if lastActiveLoopOfGroup[MidiNote] = UNDEFINED
    lastActiveLoopOfGroup[MidiNote] = 1
  endif

  midiToSend = GTL_SELECT_LOOP[lastActiveLoopOfGroup[MidiNote]]
  Call @SendMidiNoteOnOffToGtl

  midiToSend = GTL_RECORD_OVERDUB
  Call @SendMidiNoteOnOffToGtl

  if lastActiveLoopOfGroup[MidiNote] < NUMBER_OF_LOOPS_PER_GROUP_IN_GTL
    Inc lastActiveLoopOfGroup[MidiNote]
  endif
@End

@SelectGroup
  midiToSend = GTL_SELECT_GROUP[MidiNote]
  Call @SendMidiNoteOnOffToGtl
@End
